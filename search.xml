<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何使用LaTex制作演示文稿</title>
      <link href="/posts/8571.html"/>
      <url>/posts/8571.html</url>
      
        <content type="html"><![CDATA[<p>近期需要实验室内部学术交流，一直苦于无法做一个适合PPT。之前听师兄提到过使用LaTex也可以做演示文稿，所以我决定尝试一下，写篇博客做个记录。</p><h2 id="beamer是什么"><a href="#beamer是什么" class="headerlink" title="beamer是什么"></a>beamer是什么</h2><p>无论是使用PowerPoint还是WPS制作演示文稿，最大的痛点莫过于排版问题，而LaTex把排版的问题交给了底层的编译器，能够让创作者把更多的精力放在内容上面，而不是格式上面。</p><p>beamer是LaTex中的一个专门制作演示文稿的文档类。使用beamer能够快速地制作一个简洁、美观的演示文稿，非常适合于学术报告。</p><h2 id="我的beamer自定义模板"><a href="#我的beamer自定义模板" class="headerlink" title="我的beamer自定义模板"></a>我的beamer自定义模板</h2><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>aspectratio=169<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">beamer</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">% ----------------宏包-----------------</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">ctex</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">bookmark</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">booktabs</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">graphicx</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">subfigure</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">multicol</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">arev</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">hyperref</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">% --------------主题------------------</span><span class="token function selector">\usecolortheme</span><span class="token punctuation">{</span>rose<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">% -------------修改主题---------------</span><span class="token function selector">\setbeamertemplate</span><span class="token punctuation">{</span>navigation symbols<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">% 不显示导航栏</span><span class="token function selector">\useinnertheme</span><span class="token punctuation">{</span>default<span class="token punctuation">}</span><span class="token function selector">\setbeamertemplate</span><span class="token punctuation">{</span>itemize items<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token equation string">$<span class="token equation-command regex">\pencil</span>$</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">% \setbeamercovered{transparent=7}   % 半透明效果</span><span class="token function selector">\setbeamertemplate</span><span class="token punctuation">{</span>headline<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">% 显示headline</span><span class="token function selector">\setbeamertemplate</span><span class="token punctuation">{</span>footline<span class="token punctuation">}</span><span class="token punctuation">[</span>frame number<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">% footline中只显示页码</span><span class="token function selector">\definecolor</span><span class="token punctuation">{</span>mygray<span class="token punctuation">}</span><span class="token punctuation">{</span>RGB<span class="token punctuation">}</span><span class="token punctuation">{</span>245, 245, 245<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">% rgb: 取值范围为[0, 1]; RGB: 取值范围为[0, 255]</span><span class="token function selector">\definecolor</span><span class="token punctuation">{</span>mygreen<span class="token punctuation">}</span><span class="token punctuation">{</span>RGB<span class="token punctuation">}</span><span class="token punctuation">{</span>48, 128, 20<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">% rgb: 取值范围为[0, 1]; RGB: 取值范围为[0, 255]</span><span class="token function selector">\definecolor</span><span class="token punctuation">{</span>mydefault<span class="token punctuation">}</span><span class="token punctuation">{</span>rgb<span class="token punctuation">}</span><span class="token punctuation">{</span>0.2, 0.2, 0.7<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">% rgb: 取值范围为[0, 1]; RGB: 取值范围为[0, 255]</span><span class="token function selector">\setbeamercolor</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">{</span>bg=mygray<span class="token punctuation">}</span><span class="token comment" spellcheck="true">% ------------------------------------</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">% \renewcommand\contentsname{目录}</span><span class="token function selector">\title</span><span class="token punctuation">{</span>如何入门一场机器学习比赛<span class="token punctuation">}</span><span class="token function selector">\subtitle</span><span class="token punctuation">{</span>————DIGIX 精英大赛总结<span class="token punctuation">}</span><span class="token function selector">\author</span><span class="token punctuation">{</span>王钦正（研二上）<span class="token punctuation">}</span><span class="token function selector">\date</span><span class="token punctuation">{</span>2020/10/16<span class="token punctuation">}</span><span class="token comment" spellcheck="true">% -------------标题页----------------</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">frame</span><span class="token punctuation">}</span><span class="token punctuation">[</span>plain<span class="token punctuation">]</span>    <span class="token function selector">\titlepage</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">frame</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">frame</span><span class="token punctuation">}</span><span class="token punctuation">{</span>目录<span class="token punctuation">}</span>    <span class="token function selector">\tableofcontents</span><span class="token punctuation">[</span>hideallsubsections<span class="token punctuation">]</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">frame</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">% -------------------比赛意义----------------------</span><span class="token function selector">\section</span><span class="token punctuation">{</span><span class="token headline class-name">比赛意义</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">%  此处省略一万字</span><span class="token comment" spellcheck="true">%  。。。。。。。</span><span class="token comment" spellcheck="true">%  。。。。。。。</span><span class="token comment" spellcheck="true">% ------------------前期准备-----------------------</span><span class="token function selector">\section</span><span class="token punctuation">{</span><span class="token headline class-name">前期准备</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">frame</span><span class="token punctuation">}</span><span class="token punctuation">{</span>目录<span class="token punctuation">}</span>    <span class="token function selector">\tableofcontents</span><span class="token punctuation">[</span>currentsection, hideothersubsections<span class="token punctuation">]</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">frame</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">%  此处省略一万字</span><span class="token comment" spellcheck="true">%  。。。。。。。</span><span class="token comment" spellcheck="true">%  。。。。。。。</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>标题</p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20201018003702.png" alt=""></p><p>目录</p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20201018001951.png" alt=""></p><p>正文</p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20201018002028.png" alt="">  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LaTex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTex </tag>
            
            <tag> Beamer </tag>
            
            <tag> PPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USTC信息学院GPU集群使用指南</title>
      <link href="/posts/63066.html"/>
      <url>/posts/63066.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://mccipc.ustc.edu.cn/mediawiki/index.php/Main_Page">官网</a></p><p>个人感觉官网上给的使用手册门槛比较高，所以打算写这篇博客，记录自己在学院GPU集群上构建深度学习环境的流程，供需要的人参考。</p><h1 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h1><h2 id="适用对象"><a href="#适用对象" class="headerlink" title="适用对象"></a>适用对象</h2><ul><li>USTC信息学院学生</li><li>想做深度学习相关方面的工作，对计算资源有需求的同学。</li></ul><h2 id="使用要求"><a href="#使用要求" class="headerlink" title="使用要求"></a>使用要求</h2><ul><li>熟悉Linux基本命令</li><li>了解Docker的概念和基本使用方法   </li></ul><blockquote><p><a href="https://qzwangustc.github.io/posts/37102.html">Linux学习笔记一</a><br><a href="https://qzwangustc.github.io/posts/20554.html">Linux学习笔记二</a><br><a href="https://qzwangustc.github.io/posts/49384.html">Linux学习笔记三</a><br><a href="https://qzwangustc.github.io/posts/22036.html">Linux学习笔记四</a><br><a href="https://qzwangustc.github.io/posts/61265.html">Docker学习笔记一</a><br><a href="https://qzwangustc.github.io/posts/4053.html">Docker学习笔记二</a><br><a href="https://qzwangustc.github.io/posts/48969.html">Docker学习笔记三</a></p></blockquote><p>对Linux和Docker零基础的同学可以看一下上面我之前写的博客，内容不是很多，很快就可以看完，每个博客最下面有对应的视频课链接。 </p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><h3 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h3><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200925230017.png" alt=""><br>按照网站所给的方式申请，通过后，加入GPU使用微信群。</p><h3 id="登录GPU集群"><a href="#登录GPU集群" class="headerlink" title="登录GPU集群"></a>登录GPU集群</h3><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200925230425.png" alt=""><br>按照网站给出的方式操作过程如下：  </p><p>打开xshell，新建会话，名称任意，输入ip地址和端口号，确定。  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200925231537.png" alt=""> </p><p>双击刚才建立的会话，按照提示输入用户名和密码。<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200925231914.png" alt="">  </p><p>成功登陆后，进入gwork平台。</p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200925232305.png" alt="">  </p><blockquote><p>这里先说一下，主要会用到里面的两个平台：</p></blockquote><ul><li>gwork：操作控制台</li><li>G101： 用于调试代码</li></ul><h3 id="浏览一下GPU集群部署概况"><a href="#浏览一下GPU集群部署概况" class="headerlink" title="浏览一下GPU集群部署概况"></a>浏览一下GPU集群部署概况</h3><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200925233046.png" alt="">   </p><p>网站上有详细的关于GPU整体情况介绍。   </p><h3 id="测试G101平台"><a href="#测试G101平台" class="headerlink" title="测试G101平台"></a>测试G101平台</h3><p>现在没有代码没关系，先进G101测试一波，熟悉一下流程。  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> G101         <span class="token comment" spellcheck="true"># 进入G101命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200925233648.png" alt="">  </p><p>查看一下你在G101中能使用到的命令 </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200925234536.png" alt="">  </p><p>查看G101上已有的镜像有哪些：  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200925235026.png" alt=""> </p><p>随便开一个Docker容器测试，以bit:5000/deepo镜像为例，可以看到容器里面就是专门给你分配的一个Linux，在容器内可以执行ls、pwd等命令；bit:5000/deepo 是一个深度学习Docker镜像，里面装了一些主流的深度学习框架Tensorflow、Pytorch等。   </p><pre class="line-numbers language-bash"><code class="language-bash">startdocker -u <span class="token string">"-it"</span> -c /bin/bash bit:5000/deepo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200925235919.png" alt=""><br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926085902.png" alt="">  </p><p>在容器内部测试完毕后，退出容器，回到G101工作台：  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">exit</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926090119.png" alt="">  </p><p>然后查看刚开的容器是否还在后台运行，如果是的话，需要自己手动停掉。如果你看过Docker的话，这个应该没有问题： </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> docker <span class="token function">ps</span>                     <span class="token comment" spellcheck="true"># 查看当前正在运行的容器</span><span class="token function">sudo</span> docker <span class="token function">ps</span> -a                  <span class="token comment" spellcheck="true"># 查看所有已创建的容器</span><span class="token function">sudo</span> docker start 容器名字/id       <span class="token comment" spellcheck="true"># 启动已停止的容器  </span><span class="token function">sudo</span> docker stop 容器名字/id        <span class="token comment" spellcheck="true"># 停止正在运行的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="制作自己的镜像"><a href="#制作自己的镜像" class="headerlink" title="制作自己的镜像"></a>制作自己的镜像</h3><p>首先应该到<a href="http://mccipc.ustc.edu.cn/mediawiki/index.php/Docker-images">这里</a>查看集群上已有的镜像有哪些，是否有符合自己需求的镜像，如果有的话，不需要制作，跳过这一小节。网站给出的制作方式：<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926091520.png" alt="">  </p><p>制作镜像的流程： </p><blockquote><p>1、 在微信群内向管理员申请开一个有root权限的容器，用于测试并记录后面写Dockerfile所需要的步骤。基础镜像最好选择网站上推荐的：   </p></blockquote><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926092547.png" alt=""><br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926092637.png" alt="">   </p><blockquote><p>2、进入G101平台，进入刚刚申请通过有root权限的容器。一边在容器里面测试，一边做记录，形成Dockerfile文件 </p></blockquote><p>进入G101平台，进入刚刚申请通过有root权限的容器</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> G101 <span class="token function">sudo</span> docker <span class="token function">exec</span> -it <span class="token operator">&lt;</span>容器名<span class="token operator">></span> /bin/bash        <span class="token comment" spellcheck="true"># 退出时不会影响容器状态 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926094043.png" alt="">  </p><p>在xshell中新开一个选项可卡，并将选项卡垂直排列。在新选项卡中，进入我的Dockerfile文件所在目录，查看一下我的Dockerfile文件内容  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /gdata1/wangqz/Images <span class="token function">cat</span> Dockerfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926095643.png" alt=""> </p><p>我的Dokcerfile文件主要是根据翟师兄的文件改的，里面的uid获取：直接在gwork平台用id命令查询：<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926105350.png" alt=""><br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926101106.png" alt="">  </p><p>在容器中测试并记录，如果没有一路下来不报错，便可将你记录的步骤整理成Dockerfile文件。<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926101650.png" alt="">  </p><blockquote><p>3、在微信群内向管理员申请build成镜像   </p></blockquote><blockquote><p>4、在G101上测试你的镜像，如果没有问题的话，请管理员把镜像上传至集群私有库。  </p></blockquote><h3 id="写pbs文件，提交job"><a href="#写pbs文件，提交job" class="headerlink" title="写pbs文件，提交job"></a>写pbs文件，提交job</h3><p>改改网站上给出的pbs文件实例就能用了，需要改动的已用红框标出。需要说明的是编辑pbs脚本时要使用linux上的编辑器，如vim、vi等，用Windows上的编辑器会提交job时会报错。<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926103043.png" alt="">    </p><p>关于最后一条命令，网站上已说的很详细<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926103747.png" alt=""> </p><p>挂载代码和数据集时，我用的是扩展参数-u，这个主要还是要看你自己的文件目录是怎样的。下面我把我自己的工程文件目录和pbs文件内容贴出来以供参考：<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926104706.png" alt="">    </p><p>我的shell脚本写的很简单，就是进入容器后把工作目录切换成代码所在目录，然后执行代码。<em>需要注意的是需要给shell脚本文件增加执行权限。</em><br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926110039.png" alt="">  </p><p>在提交job之前，看一下当前集群上GPU卡的使用情况。  </p><pre class="line-numbers language-bash"><code class="language-bash">chk_gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926110723.png" alt=""><br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200926111004.png" alt="">   </p><p>提交job以及后面的管理job，网站上写的很详细了，就不再说了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> USTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> GPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记三</title>
      <link href="/posts/48969.html"/>
      <url>/posts/48969.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。  </p><p>所有的应用，直接打包docker镜像，就可以直接跑起来！  </p><p>如何得到镜像：</p><ul><li>从远程仓库下载  </li><li>朋友拷贝给你</li><li>自己制作一个镜像DockerFile  </li></ul><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><blockquote><p>UnionFS（联合文件系统）   </p></blockquote><p>我们下载的时候看到的一层层就是这个！</p><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual filesystem）。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。  </p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。 </p><blockquote><p>Docker镜像加载原理 </p></blockquote><p>docker的镜像实际上是由一层一层的文件系统组成，这种层级的文件系统UnionFS。 </p><p>bootfs（boot file system）主要包含bootloader和kernel, bootloader主要是引导加载kernel,Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。   </p><p>rootfs（root file system）, 在bootfs之上，包含的就是典型Linux系统中的/dev,/proc,/bin//etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu、Centos等等。 </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200913142212.png" alt="">  </p><p>平时我们装虚拟机的CentOS都是好几个G，为什么Docker这里才200M？  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200913143005.png" alt="">  </p><p>对于一个精简的OS，rootfs可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的linux发行版，bootfs基本是一致的，rootfs会差别，因此不同的发行版可以公用bootfs。</p><p>虚拟机是分钟级别，容器是秒级！   </p><h3 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h3><blockquote><p>分层的镜像  </p></blockquote><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层一层的在下载！  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200913144435.png" alt="">  </p><p>思考：为什么Docker镜像要采用这种分层的结构呢？ </p><p>最大的好处，莫过于是资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。 </p><p>查看镜像分层的方式可以通过docker image inspect命令！   </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker image inspect redis:latest </span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.        <span class="token string">"RootFS"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Type"</span><span class="token keyword">:</span> <span class="token string">"layers"</span>,            <span class="token string">"Layers"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"sha256:07cab433985205f29909739f511777a810f4a9aff486355b71308bb654cdc868"</span>,                <span class="token string">"sha256:45b5e221b6729773b50b4fc89e83a623f9f63ddf37e37078d5f197811db6177d"</span>,                <span class="token string">"sha256:7fb1fa4d4022ba2387d0df7820fa41c797eeda6f1192920da8cb99c6475dd9d1"</span>,                <span class="token string">"sha256:47d8fadc671445422662d5a25e09b2fabd2a77c7da4338ab3f817592fd60c84b"</span>,                <span class="token string">"sha256:ea96cbf71ac4d770813f8fd209a20ddb3b81c69992be2c0c3e1d1a4b9fb0da1a"</span>,                <span class="token string">"sha256:2e9c060aef92b6b958bee61fbf5f239443c629e6a62f1103c3ada7deb10aa543"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>,        <span class="token string">"Metadata"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"LastTagTime"</span><span class="token keyword">:</span> <span class="token string">"0001-01-01T00:00:00Z"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>理解  </p></blockquote><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。  </p><p>举一个简单的例子，假如基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。  </p><p>该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200913145613.png" alt="">  </p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件。 </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200913150035.png" alt="">  </p><p>上图中的镜像层跟之前图中的略有区别，主要目的是便于展示文件。  </p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层的文件7是文件5的一个更新版本。  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200913150425.png" alt="">  </p><p>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。   </p><p>Linux上可用的存储引擎有AUFS、Overlay2、Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于Linux中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。 </p><p>Docker在Windows上仅支持Windowsfilter一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW。 </p><p>下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200913152823.png" alt="">  </p><blockquote><p>特点  </p></blockquote><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部！  </p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！    </p><p>如何提交一个自己的镜像？  </p><blockquote><p>commit镜像  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker commit 提交容器成为一个新的副本  <span class="token comment" spellcheck="true"># 命令和git原理类似  </span>docker commit -m<span class="token operator">=</span><span class="token string">"提交的描述信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span> 容器id 目标镜像名:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实战测试  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1、启动一个默认的tomcat  </span><span class="token comment" spellcheck="true"># 2、发现这个默认的tomcat 是没有webapps应用，镜像的原因，官方的镜像默认 webapps下面是没有文件的！    </span><span class="token comment" spellcheck="true"># 3、我自己拷贝进去了基本的文件   </span><span class="token comment" spellcheck="true"># 4、将我们操作过的容器通过commit提交为一个镜像！我们以后就使用我们修改过的镜像即可，这就是我们自己的一个修改的镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200913224551.png" alt=""></p><p>学习方式说明：理解概念，但是一定要实践，最后实践和理论相结合一次搞定这个知识。 </p><pre class="line-numbers language-bash"><code class="language-bash">如果你想要保存当前容器的状态，就可以通过commit来提交，并获得一个镜像，就好比我们以前学习VM时候，快照！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到了这里才算是入门Docker! </p><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><blockquote><p>docker的理念回顾  </p></blockquote><p>将应用和环境打包成一个镜像  </p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！<em>需求：数据可以持久化</em>  </p><p>MySQL，容器删了，删库跑路！需求：MySQL数据可以存储在本地！  </p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！ </p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！ </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200913234419.png" alt="">  </p><p><strong>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的</strong>  </p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><blockquote><p>方式一：直接使用命令来挂载 -v    </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker run -it -v 主机目录:容器内目录   <span class="token comment" spellcheck="true"># 测试  </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it -v /home/test:/home centos /bin/bash   </span><span class="token comment" spellcheck="true"># 启动起来之后我们可以通过 docker inspect 容器id  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914095927.png" alt="">  </p><p>测试文件的同步 </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914100925.png" alt="">  </p><p>再来测试！  </p><p>1、停止容器 </p><p>2、宿主机上修改文件   </p><p>3、启动容器</p><p>4、容器内的数据依旧是同步的    </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914102246.png" alt="">  </p><p>好处：我们以后修改只需要在本地修改即可，容器内会自动同步！  </p><h3 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h3><p>思考：MySQL的数据持久化问题！  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载镜像</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql </span><span class="token comment" spellcheck="true"># 运行容器，需要做数据挂载！  # 安装启动mysql，需要配置密码的，这是要注意点！  </span><span class="token comment" spellcheck="true"># 官方测试： docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag  </span><span class="token comment" spellcheck="true"># 启动我们的mysql </span>-d 后台运行-p 端口映射  -v 卷挂载 -e 环境配置  --name 容器名字 <span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p 3344:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name=mysql01 mysq</span><span class="token comment" spellcheck="true"># 启动成功之后，我们在本地使用 sqlyog 连接测试一下 </span><span class="token comment" spellcheck="true"># sqlyog-连接到服务器的3344 --- 3344 和 容器内的3306映射，这个时候我们就可以连接上了！  </span><span class="token comment" spellcheck="true"># 在本地测试创建一个数据库，查看一下我们映射的路径是否ok!   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设我们将容器删除</p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914141450.png" alt="">  </p><p>发现，我们挂载到本地的数据卷依旧没有丢失，这就实现了容器持久化功能！</p><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 匿名挂载 </span>-v 容器内路径<span class="token operator">!</span>  docker run -d -P --name nginx01 -v /etc/nginx nginx     <span class="token comment" spellcheck="true"># 查看所有的 volume的情况 </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker volume ls </span>DRIVER              VOLUME NAMElocal               83c8dbe25a1d9355610983389df565eed8651d6edb13e004e482e57e0e9c0e40local               98c7840efe1bde66f110553f7f9ef00f8095fc6b111f61f2adc38dcbf0f3d418local               faa9a1a228a4ea3efcdf977aee04ad27ed25062fa7d378032d155a7316bb2bad<span class="token comment" spellcheck="true"># 这里发现，这种就是匿名挂载，我们在 -v 只写了容器内的路径，没有写容器外的路径  </span><span class="token comment" spellcheck="true"># 具名挂载 </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx </span>e6b52918b37237e6fba4a367690e139da88edc187a0851cba509fd0b573d2f03<span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker volume ls </span>DRIVER              VOLUME NAMElocal               juming-nginx<span class="token comment" spellcheck="true"># 通过 -v 卷名:容器内路径 </span><span class="token comment" spellcheck="true"># 查看一下这个卷</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914154957.png" alt="">  </p><p>所有的docker容器内的卷，没有指定目录的情况下都是在 <em>/var/lib/docker/volumes/xxxxx/_data</em> </p><p>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况下在使用的<em>具名挂载</em>  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如何确定是具名挂载还是匿名挂载，还是指定路径挂载！  </span>-v 容器内路径           <span class="token comment" spellcheck="true"># 匿名挂载  </span>-v 卷名:容器内路径      <span class="token comment" spellcheck="true"># 具名挂载 </span>-v /宿主机路径:容器内路径  <span class="token comment" spellcheck="true"># 指定路径挂载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>拓展  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 通过 -v 容器内路径:ro  rw  改变独写权限 </span>ro   <span class="token function">readonly</span>   <span class="token comment" spellcheck="true"># 只读 </span>rw   readwrite  <span class="token comment" spellcheck="true"># 可读可写 </span><span class="token comment" spellcheck="true"># 一旦设置了这个容器权限，容器对我们挂载出来的内容就有限定了！ </span>docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx  <span class="token comment" spellcheck="true"># ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h3><p>Dockerfile就是用来构建docker镜像的构建文件！命令脚本！先体验一下！  </p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个个的命令，每个命令都是一层！ </p><blockquote><p>方式二：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个dockerfile文件，名字可以随机，建议 Dockerfile  </span><span class="token comment" spellcheck="true"># 文件中的内容  指令（大写）  参数  </span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>, <span class="token string">"volume02"</span><span class="token punctuation">]</span>CMD <span class="token keyword">echo</span> <span class="token string">"---end---"</span>CMD /bin/bash<span class="token comment" spellcheck="true"># 这里的每个命令，就是镜像的一层</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914195557.png" alt="">  </p><p>启动自己写的容器  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914200539.png" alt=""></p><p>挂载方式  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914201028.png" alt=""> </p><p>查看一下挂载的路径 </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914201305.png" alt=""> </p><p>测试一下刚才的文件是否同步出去了！ </p><p>这种方式我们未来使用的十分哆哦哦哦，因为我们通常会构建自己的镜像！ </p><p>假设构建镜像时没有挂载卷，要手动镜像挂载 -v 卷名:容器内路径！</p><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>多个mysql同步数据！  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914213203.png" alt="">  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914215205.png" alt=""> </p><p>docker01 创建的内容同步到了docker02上面</p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914221334.png" alt=""> </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914223416.png" alt="">  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 测试，可以删除docker01，查看一下docker02和docker03是否还可以访问这个文件  </span><span class="token comment" spellcheck="true"># 测试依旧可以访问   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200914225024.png" alt="">  </p><blockquote><p>多个mysql实现数据共享   </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p 3344:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name=mysql01 mysql  </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p 8080:3306 -e MYSQL_ROOT_PASSWORD=123456 --name=mysql02 --volumes-from mysql01 mysql </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>结论：</strong> </p><p>容器之间配置新信息的传递，数据卷容器的声明周期一直持续到没有容器使用为止。</p><p>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p><h2 id="DcokerFile"><a href="#DcokerFile" class="headerlink" title="DcokerFile"></a>DcokerFile</h2><h3 id="DcokerFile介绍"><a href="#DcokerFile介绍" class="headerlink" title="DcokerFile介绍"></a>DcokerFile介绍</h3><p>dockerfile 是用来构建docker镜像的文件！命令参数脚本！  </p><p>构建步骤： </p><p>1、编写一个dockerfile文件  </p><p>2、docker buuild 构建成为一个镜像 </p><p>3、docker run 运行镜像 </p><p>4、docker push 发布镜像（DockerHub、阿里云镜像仓库）</p><p>查看一下官方是怎么做的？  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915092407.png" alt="">    </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915092622.png" alt="">  </p><p>很多官方镜像都是基础包，很多功能没有，我们通常会自己搭建自己的镜像！  </p><p>官方既然可以制作镜像，那我们也可以！  </p><h3 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h3><p>基础知识：  </p><p>1、每个保留关键字（指令）都必须是大写   </p><p>2、执行从上到下顺序执行 </p><p>3、#表示注释 </p><p>4、每一个指令都会创建提交一个新的镜像层，并提交！   </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915101336.png" alt="">  </p><p>dockefile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！  </p><p>Docker镜像逐渐成为企业交付的标准，必须要掌握！  </p><p>步骤：开发，部署，运维。。。缺一不可！  </p><p>DockerFile：构建文件，定义了一切的步骤，源代码 </p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行的产品！  </p><p>Docker容器：容器就是镜像运行起来提供服务器  </p><h3 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h3><p>以前的话我们就是使用别人的，现在我们知道了这些指令后，我们来练习自己写一个镜像！  </p><pre class="line-numbers language-bash"><code class="language-bash">FROM              <span class="token comment" spellcheck="true"># 基础镜像，一切从这里开始构建 </span>MAINTAINER        <span class="token comment" spellcheck="true"># 镜像是谁写的，姓名+邮箱  </span>RUN               <span class="token comment" spellcheck="true"># 镜像构建的时候需要运行的命令  </span>ADD               <span class="token comment" spellcheck="true"># 步骤，tomcat镜像，这个tomcat压缩包！添加内容 </span>WORKDIR           <span class="token comment" spellcheck="true"># 镜像的工作目录  </span>VOLUME            <span class="token comment" spellcheck="true"># 挂载的目录  </span>EXPOSE            <span class="token comment" spellcheck="true"># 暴露的端口号  </span>CMD               <span class="token comment" spellcheck="true"># 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代  </span>ENTRYPOINT        <span class="token comment" spellcheck="true"># 指定这个容器启动的时候要运行的命令，可以追加命令   </span>ONBUILD           <span class="token comment" spellcheck="true"># 当构建一个被继承 DockerFile 这个时候就会运行 ONBUILD 的指令，触发指令。</span>COPY              <span class="token comment" spellcheck="true"># 类似ADD，将我们文件拷贝到镜像中  </span>ENY               <span class="token comment" spellcheck="true"># 构建的时候设置环境变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915102323.png" alt="">   </p><h3 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h3><p>Docker Hub中99%镜像都是从这个基础镜像过来的FROM scratch，然后配置需要的软件和配置来进行的构建 </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915110959.png" alt="">  </p><blockquote><p>创建一个自己的centos  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1、编写dockerfile文件 </span>FROM centos  MAINTAINER qzwang<span class="token operator">&lt;</span>qzwang96@mail.ustc.edu.com<span class="token operator">></span>  ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>   RUN yum -y <span class="token function">install</span> vim  RUN yum -y <span class="token function">install</span> net-tools EXPOSE 80  CMD <span class="token keyword">echo</span> <span class="token variable">$MYPATH</span> CMD <span class="token keyword">echo</span> <span class="token string">"----end------"</span> CMD /bin/bash  <span class="token punctuation">[</span>root@iZ2zedqh9q8  <span class="token comment" spellcheck="true"># 2、通过这个文件构建镜像  </span><span class="token comment" spellcheck="true"># 命令 docker build -f dockerfile文件路径 -t 镜像名:[tag] . </span>Successfully built 9b9d5ce5b689Successfully tagged mycentos:0.1 <span class="token comment" spellcheck="true"># 3、测试运行  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比：之前的原生的centos  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915115744.png" alt="">  </p><p>我们增加之后的镜像  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915115923.png" alt="">  </p><p>我们可以列出本地镜像的变更历史  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915121046.png" alt="">  </p><p>我们平时拿到一个镜像，可以研究一下它是怎么做的了？  </p><blockquote><p>CMD和ENTRYPOINT的区别  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">CMD               <span class="token comment" spellcheck="true"># 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代  </span>ENTRYPOINT        <span class="token comment" spellcheck="true"># 指定这个容器启动的时候要运行的命令，可以追加命令  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试cmd  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 编写 dockerfile 文件</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim docker-cmd-test </span>FROM centos CMD <span class="token punctuation">[</span><span class="token string">"ls"</span>, <span class="token string">"-a"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 构建镜像</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker build -f docker-cmd-test -t cmdtest .   </span><span class="token comment" spellcheck="true"># run运行，发现我们的ls -a 命令生效  </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run cmdtest</span><span class="token keyword">.</span><span class="token punctuation">..</span>.dockerenvbindevetchomeliblib64lost+foundmediamntopt<span class="token comment" spellcheck="true"># 想追加一个命令 -l ls-al</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run cmdtest -l </span>docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused <span class="token string">"exec: \"-l\": executable file not found in <span class="token variable">$PATH</span>"</span><span class="token keyword">:</span> unknown.ERRO<span class="token punctuation">[</span>0000<span class="token punctuation">]</span> error waiting <span class="token keyword">for</span> container: context canceled <span class="token comment" spellcheck="true"># cmd的情况下 -l 替换了CMD ["ls", "-a"]命令，-l不是命令所以报错！  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试ENTRYPOINT  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim docker-entrypoint-test </span>FROM centos ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"ls"</span>, <span class="token string">"-a"</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker build -f docker-entrypoint-test -t entrypoint-test .</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run entrypoint-test </span><span class="token keyword">.</span><span class="token punctuation">..</span>.dockerenvbindevetchomeliblib64 <span class="token comment" spellcheck="true"># 我们追加的命令，是直接拼接在我们的 ENTRYPOINT 命令的后面！</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z dockerfile<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run entrypoint-test -l</span>total 56drwxr-xr-x  1 root root 4096 Sep 15 06:41 <span class="token keyword">.</span>drwxr-xr-x  1 root root 4096 Sep 15 06:41 <span class="token punctuation">..</span>-rwxr-xr-x  1 root root    0 Sep 15 06:41 .dockerenvlrwxrwxrwx  1 root root    7 May 11  2019 bin -<span class="token operator">></span> usr/bindrwxr-xr-x  5 root root  340 Sep 15 06:41 devdrwxr-xr-x  1 root root 4096 Sep 15 06:41 etc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dockerfile中很多命令都十分相似，我们需要了解它们的区别，我们最好的学习就是对比它们然后测试效果！  </p><h3 id="实战：Tomcat镜像"><a href="#实战：Tomcat镜像" class="headerlink" title="实战：Tomcat镜像"></a>实战：Tomcat镜像</h3><p>1、准备镜像文件 tomcat压缩包，jdk的压缩包    </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915165630.png" alt="">  </p><p>2、编写dockerfile文件，官方命名<em>Dockerfile</em>，build会自动寻找这个文件，就不需要-f指定了！ </p><pre class="line-numbers language-bash"><code class="language-bash">FROM centosMAINTAINER qzwang<span class="token operator">&lt;</span>qzwanag96@mail.ustc.edu.cn<span class="token operator">></span>COPY readme.txt /usr/local/readme.txtADD jdk-8u261-linux-x64.tar.gz /usr/local/ADD apache-tomcat-9.0.22.tar.gz /usr/local/RUN yum -y <span class="token function">install</span> vimENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>ENV JAVA_HOME /usr/local/jdk1.8.0_261ENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.22ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.22ENV PATH <span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/binEXPOSE 8080CMD /usr/local/apache-tomcat-9.0.22/bin/startup.sh <span class="token operator">&amp;&amp;</span> <span class="token function">tail</span> -F /usr/local/apache-tomcat-9.0.22/bin/logs/catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、构建镜像  </p><pre class="line-numbers language-bash"><code class="language-bash">docker build -t diytomcat <span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、启动镜像 </p><p>5、访问测试   </p><p>6、发布项目（由于做了卷挂载，我们直接在本地编写项目就可以发布了！）  </p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.4<span class="token punctuation">"</span></span>     <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/j2ee<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/j2ee         http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>%@ page language<span class="token operator">=</span><span class="token string">"java"</span> contentType<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span>    pageEncoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>%<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>hello, qzwang<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span>br/<span class="token operator">></span><span class="token operator">&lt;</span>%System.out.println<span class="token punctuation">(</span><span class="token string">"----my test web logs----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>%<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915195703.png" alt="">  </p><p>发现：项目部署成功，可以直接访问ok！</p><p>我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！   </p><h3 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h3><blockquote><p>DockerHub   </p></blockquote><p>1、地址：<a href="https://hub.docker.com/，注册自己的账号">https://hub.docker.com/，注册自己的账号</a>   </p><p>2、确定这个账号可以登录 </p><p>3、在我们服务器上提交自己的镜像  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z tomcat<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker login --help</span>Usage:    docker login <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>SERVER<span class="token punctuation">]</span>Log <span class="token keyword">in</span> to a Docker registry.If no server is specified, the default is defined by the daemon.Options:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Username<span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z tomcat<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker login -u qzwangustc</span>Password: WARNING<span class="token operator">!</span> Your password will be stored unencrypted <span class="token keyword">in</span> /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="token comment" spellcheck="true">#credentials-store</span>Login Succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、登录完毕后就可以提交镜像了，就是一步 docker push  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># push自己的镜像到服务器上</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z tomcat<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker push diytomcat</span>The push refers to repository <span class="token punctuation">[</span>docker.io/library/diytomcat<span class="token punctuation">]</span>55bf55af8c96: Preparing c4cff1d0527b: Preparing a18f72857821: Preparing 7c510a480aec: Preparing 291f6e44771a: Preparing denied: requested access to the resource is denied  <span class="token comment" spellcheck="true"># push镜像的问题？</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z tomcat<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker push diytomcat:1.0</span>The push refers to repository <span class="token punctuation">[</span>docker.io/qzwangustc/diytomcat<span class="token punctuation">]</span>An image does not exist locally with the tag: qzwangustc/diytomcat<span class="token comment" spellcheck="true"># 解决，增加一个 tag  </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z tomcat<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker tag 14acda442825 qzwangustc/tomcat:1.0</span><span class="token comment" spellcheck="true"># docker push 上去即可！自己发布的镜像的时候尽量带上版本号  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915203621.png" alt=""> </p><p>提交的时候也是按照镜像的层级来提交的！ </p><blockquote><p>阿里云镜像服务上  </p></blockquote><p>1、登录阿里云 </p><p>2、找到容器镜像服务  </p><p>3、创建命名空间  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915205054.png" alt=""> </p><p>4、创建容器镜像  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915205313.png" alt=""> </p><p>5、浏览阿里云 </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915205449.png" alt=""> </p><p>阿里云容器镜像就参考官方地址！</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200915211633.png" alt=""> </p><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><p>后面的还没看，以后要用到后面的知识再看。。。。。</p><blockquote><p>参考：<a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=18">狂神说Java</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器购买及宝塔部署环境说明</title>
      <link href="/posts/35327.html"/>
      <url>/posts/35327.html</url>
      
        <content type="html"><![CDATA[<h3 id="服务器相关知识"><a href="#服务器相关知识" class="headerlink" title="服务器相关知识"></a>服务器相关知识</h3><blockquote><p>为什么程序员都需要一个自己的服务器   </p></blockquote><ol><li>你作为一个程序员，必须要发布自己的网站和项目！ </li><li>练习Linux操作  </li><li>自己的远程仓库、远程数据库、远程tomcat…搭建在服务器上 </li><li>练习，Linux进行任意的环境部署操作！Window下开发，你不熟悉Linux。</li><li>。。。 </li></ol><blockquote><p>服务器如何购买  </p></blockquote><p>尽量趁打折，购买，便宜！  </p><p><strong>学生机：</strong>   </p><p>如果是学生或者24一下的小伙伴，可以购买学生机，100多元一年  </p><p>香港服务器可以避免备案，但是尽量不要自己挂VPN，会被封！   </p><blockquote><p>买完服务器之后该做什么  </p></blockquote><p>服务器就是一个远程Linux  </p><p>1、 在阿里云购买的，需要开通安全组设置；端口映射   </p><p>MySQL:3306, tomcat:8080等等。</p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200910102847.png" alt=""></p><p>2、获取服务器的公网ip地址：修改实例名名称和密码，第一次修改需要重启，使用xshell远程连接       </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 阿里云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记四</title>
      <link href="/posts/22036.html"/>
      <url>/posts/22036.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><blockquote><p>什么是Vim编辑器    </p></blockquote><p>vim通过一些插件可以实现和IDE一样的功能！  </p><p>vim是从vi发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。尤其是Linux中，必须要会使用Vim（<strong>查看内容，编辑内容，保存内容！</strong>）  </p><p>简单的说，vi是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p><p>vim则可以说是程序开发者的一项很好用的工具。</p><p>所有的Unix Like系统都会有vi文本编辑器，其他的文本编辑器则不一定存在。  </p><p>连 vim 的官方网站 (<a href="http://www.vim.org">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。 </p><p>vim 键盘图<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200908170626.png" alt=""></p><blockquote><p>三种使用模式    </p></blockquote><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200908172407.png" alt="">  </p><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p><p>用户刚刚启动 vi/vim，便进入了命令模式。 </p><p>balabala…  </p><p><strong>用Vim打开一个文件，如果文件存在，则编辑文件；如果不存在，则创建一个文件。</strong>  </p><p><strong>想要记住的操作：</strong>   </p><ul><li>上下左右移动光标  </li><li>数字<space> 光标横向移动或 数字<enter>光标纵向移动  </enter></space></li><li>/word, ?word, n, N 搜索替换 </li><li>u, 重复动作  </li><li>:wq 保存退出 </li><li>:set nu 设置行号，代码中经常使用  </li></ul><p>以上掌握熟练即可，其余的了解或者自己测一测即可，我们平时使用VIM最多的就是修改下文件内容而已！ </p><h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><blockquote><p>简介 </p></blockquote><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先系统管理员申请一个账号，然后以这个账号的身份进入系统。  </p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行追踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。   </p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。  </p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。 </p><p>实现用户账号的管理，要完成的工作主要有如下几个方面： </p><ul><li>用户账号的添加、删除与修改  </li><li>用户口令的管理   </li><li>用户组的管理  </li></ul><blockquote><p>用户账号的管理  </p></blockquote><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。  </p><p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。 </p><blockquote><p>（root）添加账号useradd   </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">useradd</span> -选项 用户名  <span class="token comment" spellcheck="true">#其他选项看微信公众号   </span>        -m 自动创建用户的主目录 /home/<span class="token punctuation">..</span>.          -G 添加用户组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>理解一下本质：Linux中一切皆文件，这里的添加用户说白了就是往某一个文件中写入用户的信息了！  </p><p>增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件，如: /etc/shadow, /etc/group等。</p><blockquote><p>删除用户 userdel </p></blockquote><p>userdel -r 用户名  删除用户的时候将它的目录一块删掉   </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls </span>kuangshen  qzwang  test.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># userdel -r qzwang</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls </span>kuangshen  test.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改用户 usermod   </p></blockquote><p>usermod 对应修改的内容 修改那个用户  </p><p>修改完毕后查看配置文件即可！  </p><blockquote><p>切换用户！  </p></blockquote><p>root用户<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200908220650.png" alt=""></p><p>普通用户<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200908221400.png" alt=""></p><p><strong>临时查看、更改主机名：hostname、hostname 主机名</strong>  </p><blockquote><p>用户的密码设置问题！ </p></blockquote><p>我们一般通过root创建用户的时候！要配置密码！ </p><p><strong>Linux上输入密码是不会显示的，并不是程序的问题</strong>   </p><p>在公司中，一般拿不到公司的root权限，都是一些分配的账号！  </p><p>如果是超级用户： </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span> username:new password:re password:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果是普通用户： </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> UNIX password: new password: re password:  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>锁定账户   </p></blockquote><p>root，比如张三辞职了！冻结这个账号，一旦冻结，这个人就登录不上系统了！  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span> -l 用户名  <span class="token comment" spellcheck="true">#锁定之后这个用户就不能登录了！  </span><span class="token function">passwd</span> -d 用户名  <span class="token comment" spellcheck="true">#没有密码也不能登录！  </span><span class="token function">passwd</span> -u 用户名  <span class="token comment" spellcheck="true">#解锁  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这以上的基本的命令，大家必须要掌握！但是自己玩的时候可以使用来学习！Linux是一个多用户的系统！</p><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>属主、属组  </p><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理（开发，测试，运维，root）。不同Linux系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。  </p><p>用户组的管理涉及用户组的添加、删除和修改。<strong>组的增加、删除和修改实际上就是对/etc/group文件的更新。</strong>    </p><blockquote><p>创建一个用户组 groupadd  </p></blockquote><p>创建完用户组后可以得到一个组的id，这个id时可以指定的！<strong>-g 520</strong>，如果不指定就是自增1   </p><blockquote><p>删除用户组 groupdel </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupdel qzwang2</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/group</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>修改用户组的权限信息和名字 groupmod -g -n  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupmod -g 520 -n qzwang2 qzwang </span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/group</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>用户如果要切换用户组怎么办？ </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 登录当前用户  qzwang </span>$ newgrp root  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>拓展：文件的查看！（了解即可）  </p></blockquote><p>/etc/passwd  </p><p><strong>用户名:口令（登录密码）:用户标识号:组标识号:注释性描述:主目录:登录Shell</strong>     </p><p>这个文件中的每一行都代表一个用户，我们可以看到这个用户的主目录在哪，可以看到属于哪一个组！  </p><p><strong>登录口令：真正的加密后的用户口令字存放到/etc/shadow文件中，保证密码的安全性</strong>   </p><p>用户组的所有信息都存放在/etc/group文件中。  </p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><blockquote><p>df（列出文件系统整体的磁盘使用量）  du （检查磁盘空间使用量）   </p></blockquote><p>df!<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200909093527.png" alt="">   </p><p>du!  (进入到某一个文件夹)   </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">du</span>   <span class="token function">du</span> -a -h   <span class="token comment" spellcheck="true">#查看隐藏文件，按照M或G显示大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200909094808.png" alt="">  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200909095024.png" alt="">  </p><blockquote><p>Mac或者想使用Linux挂载我们的一些本底磁盘或者文件    </p></blockquote><p>mount : 挂载<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200909095605.png" alt="">   </p><p>umount -f [挂载位置] 强制卸载   </p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>Linux中一切皆文件<br><strong>（文件：读写执行（查看，创建，删除，移动，复制，编辑），权限（用户、用户组）。系统：（磁盘，进程））</strong></p><p>对用我们开发人员来说，其实Linux更多偏向于使用即可！   </p><blockquote><p>基本概念！什么时进程？  </p></blockquote><ol><li>在Linux中，每一个程序都是有自己的一个进程，每一个进程都有一个id号！</li><li>每一个进程，都会有一个父进程！ </li><li>进程可以有两种存在方式：前台！后台运行！</li><li>一般的话服务都是都是后台运行的，基本的程序都是前台运行的！  </li></ol><blockquote><p>命令  </p></blockquote><p><strong>ps:</strong>查看当前系统中正在执行的各种进程信息！<br>ps-xx ：</p><ul><li>-a ：显示当前终端运行的进程信息（当前的进程）</li><li>-u ：以用户的信息显示进程 </li><li>-x ：显示后台运行进程的参数！ </li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ps -aux 查看所有的进程  </span><span class="token function">ps</span> -aux<span class="token operator">|</span><span class="token function">grep</span> mysql<span class="token function">ps</span> -aux<span class="token operator">|</span><span class="token function">grep</span> redis<span class="token comment" spellcheck="true"># | 在Linux这个叫做管道符   A|B</span><span class="token comment" spellcheck="true"># grep 查找文件中符合条件的字符串！  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于我们来说，这里目前只需要记住一个命令即可 ps-xx|grep 进程名字！ 过滤进程信息！  </p><p><strong>ps -ef ：可以查看到父进程的信息</strong>  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> mysql <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看父进程我们一般可以通过进程树结构来查看！  </p><pre class="line-numbers language-bash"><code class="language-bash">pstree      -p 显示父id      -u 显示用户组   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结束进程：杀掉进程，等价于Windows结束任务！   </p><p>kill -9 进程的id  </p><p>但是啊，我们平时写的一个Java代码死循环了，可以选择结束进程！杀进程  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> -9 进程的id  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示强制结束该进程！  </p><h3 id="扩展：Vmware使用"><a href="#扩展：Vmware使用" class="headerlink" title="扩展：Vmware使用"></a>扩展：Vmware使用</h3><p>很多小伙伴，比较吝啬，买不起70一年的服务器！Vmware本地安装包！   </p><h4 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h4><p>保留当前系统信息为快照，随时可以恢复，以防未来系统被你玩坏，就好比游戏中的归档！   </p><p>平时的话，我们每配置一个东西就可以拍摄一个快照，保留信息！  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200909110523.png" alt="">  </p><h4 id="本地网络配置"><a href="#本地网络配置" class="headerlink" title="本地网络配置"></a>本地网络配置</h4><p>*具体看狂神的视频，有点音画不同步。  *</p><blockquote><p>参考 <a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;mid=2247483895&amp;idx=1&amp;sn=b685934ee0d08b9d01cc0c35ed7fed71&amp;scene=19#wechat_redirect">狂神学Java</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记三</title>
      <link href="/posts/49384.html"/>
      <url>/posts/49384.html</url>
      
        <content type="html"><![CDATA[<h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><p>十个字母：文件类别+属主权限+属组权限+其他用户权限  </p><blockquote><p>chgrp :  更改文件属组   </p></blockquote><pre class="line-numbers language-powershell"><code class="language-powershell">chgrp <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> 属组名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。 </p><blockquote><p>chown ：更改文件属主，也可以同时改变属组  </p></blockquote><pre class="line-numbers language-powershell"><code class="language-powershell">chown <span class="token punctuation">[</span>–R<span class="token punctuation">]</span> 属主名 文件名chown <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> 属主名：属组名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote><p>我们经常会用到文件查看命令<br>Linux系统使用一下命令查看文件的内容： </p></blockquote><ul><li><strong>cat 由第一行开始显示文件内容 ，用来读文章，或者读取配置文件，都使用cat命令</strong></li><li>tac 从最后一行开始显示，可以看出tac是cat的倒着写 </li><li><strong>nl 显示的时候，顺道输出行号！ 看代码的时候，希望显示行号！常用</strong></li><li>more 一页一页的显示文件内容 （空格代表翻页，enter代表向下看一行，:f查看行号信息）</li><li><strong>less 与more类似，但是比more更好的是，它可以往前翻页！（空格代表下翻页，上下键代表翻动页面！退出 q 命令，查找字符串 /要查询的字符 向下查询，向上查询使用 ？要查询的字符串，n继续搜寻上一个，N继续搜寻下一个）</strong></li><li>head 只看头几行 通过-n参数来控制显示几行</li><li>tail 只看尾巴几行 -n参数来控制显示几行</li></ul><p>网络配置目录：<em>cd etc/sysconfig/network-scripts/</em>   ===&gt; CentOS7系统，不同的系统不一样<br>ifconfig : 查看网络配置<br><strong>你可以使用man [命令]来查看各个命令的使用文档，如：man cp。</strong></p><h3 id="拓展：Linux链接的概念（了解即可！）"><a href="#拓展：Linux链接的概念（了解即可！）" class="headerlink" title="拓展：Linux链接的概念（了解即可！）"></a>拓展：Linux链接的概念（了解即可！）</h3><p>Linux的链接分为两种：硬链接、软链接！<br><em>硬链接</em>：A—B, 假设B是A的硬链接，那么它们指向了同一个文件！允许一个文件拥有多个路径，用户可以通过这种机制建立硬链接到一些重要文件上，防止误删除！<br><em>软链接</em>：类似Windows的快捷方式，删除源文件，快捷方式也访问不了！  </p><p><strong>ln</strong> 创建链接命令<br><strong>touch</strong> 创建文件命令<br><strong>echo</strong> 输入字符串，也可以输入到文件中  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ll</span>total 4drwx------. 14 kuangshen kuangshen 4096 Sep  7 03:34 kuangshendrwxr-xr-x.  2 root      root         6 Sep  7 07:26 qzwang<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch f1          # 创建一个f1文件</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln f1 f2          # 创建一个硬链接</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s f1 f3      # 创建一个软连接</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ll</span>total 4-rw-r--r--.  2 root      root         0 Sep  8 00:33 f1-rw-r--r--.  2 root      root         0 Sep  8 00:33 f2lrwxrwxrwx.  1 root      root         2 Sep  8 00:33 f3 -<span class="token operator">></span> f1drwx------. 14 kuangshen kuangshen 4096 Sep  7 03:34 kuangshendrwxr-xr-x.  2 root      root         6 Sep  7 07:26 qzwang<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "helo world" >>f1</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat f1</span>helo world<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat f2</span>helo world<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat f3</span>helo world<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -rf f1     #删除f1之后，查看f2和f3的区别</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ll</span>total 8-rw-r--r--.  1 root      root        11 Sep  8 00:36 f2lrwxrwxrwx.  1 root      root         2 Sep  8 00:33 f3 -<span class="token operator">></span> f1drwx------. 14 kuangshen kuangshen 4096 Sep  7 03:34 kuangshendrwxr-xr-x.  2 root      root         6 Sep  7 07:26 qzwang<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls </span>f2  f3  kuangshen  qzwang<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat f2</span>helo world<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat f3</span>cat: f3: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;mid=2247483885&amp;idx=1&amp;sn=cf98ffb9698999abf950c55da75c60ec&amp;scene=19#wechat_redirect">狂神学Java</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记二</title>
      <link href="/posts/20554.html"/>
      <url>/posts/20554.html</url>
      
        <content type="html"><![CDATA[<h3 id="走进Linux系统"><a href="#走进Linux系统" class="headerlink" title="走进Linux系统"></a>走进Linux系统</h3><blockquote><p>开机登录   </p></blockquote><p>开机会启动许多程序。它们在Windows叫做“服务”（service）, 在Linux就叫做“守护进程”（daemom）<br>一般来说，用户的登录方式有三种： </p><ul><li>命令行登录</li><li>ssh登录</li><li>图形界面登录  </li></ul><p>最高权限账户为root,可以操作一切！ </p><blockquote><p>关机  </p></blockquote><p><strong>Linux中没有错误就代表成功</strong><br>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。<br><strong>不管关机还是重启，首先要运行sync命令，把内存中的数据写到磁盘中</strong>  </p><pre class="line-numbers language-powershell"><code class="language-powershell">sync  shutdown <span class="token comment" spellcheck="true">#关机指令，man shutdown查看用法  </span>shutdown <span class="token operator">-</span>h 10  shutdown <span class="token operator">-</span>h now  shutdown <span class="token operator">-</span>h 20:52 shutdown <span class="token operator">-</span>r now shutdown <span class="token operator">-</span>r <span class="token operator">+</span>10reboot halt  <span class="token comment" spellcheck="true"># ==  shutdown -h now     </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>系统目录结构</p></blockquote><ol><li>一切皆文件 </li><li>根目录/，所有的文件都挂载在这个节点下 </li></ol><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">ls</span> <span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>树状目录结构：<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907212752.png" alt="">  </p><p>一下是对这些目录的解释：  </p><ul><li>/bin：bin是Binary的缩写，这个目录存放着最经常使用的命令  </li><li>/boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。（<strong>不要动</strong>） </li><li>/dev：dev是Device（设备），存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。 </li><li><strong>/etc：这个目录存放的是所有的系统管理所需要的配置文件和子目录</strong> </li><li><strong>/home：用户的主目录，在Linux中每一个用户一个自己的目录，一般目录是以用户的账号命名的</strong></li><li>/lib：这个目录存放着系统最基本的动态链接共享库，起作用类似于Windows中的DLL文件  </li><li>/lost+found：这个目录一般是空的，当系统非法关机后，这里就存放了一些文件。（存放突然关机的一些文件）</li><li>/media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</li><li>/mnt：系统提供这个目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt上，然后进入该目录就可以查看光驱里的内容了 （我们后面会把一些本地文件挂载在这个目录下）</li><li><strong>/opt：这是给主机额外安装软件所摆放的目录，比如你安装一个Oracle数据库就可以放到这个目录下。默认是空的。</strong></li><li>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息 （不用管）</li><li>/root：该目录为系统管理员，也称为超级权限者的用户主目录 </li><li>/sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序 </li><li>/srv：该目录存放一些服务启动之后需要提取的数据  </li><li>/sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs  </li><li><strong>/tmp：这个目录是用来存放一些临时文件。用完即丢的文件。可以放在这个目录下，安装包！</strong></li><li><strong>/usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似Windows下的program files目录</strong></li><li>/usr/bin：系统用户使用的应用程序 </li><li>/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。Super </li><li>/usr/src：内核源代码默认的放置目录 </li><li><strong>/var：这个目录存放着不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</strong></li><li>/run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除</li><li>/www：存放服务器网站相关的资源，环境，网站的项目 </li></ul><h3 id="常用的基本命令"><a href="#常用的基本命令" class="headerlink" title="常用的基本命令"></a>常用的基本命令</h3><h4 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h4><blockquote><p>绝对路径、相对路径  </p></blockquote><p>绝对路径是路径的全称  </p><pre class="line-numbers language-powershell"><code class="language-powershell">cd ：切换目录命令 <span class="token punctuation">.</span><span class="token operator">/</span> ：当前目录 cd <span class="token punctuation">.</span><span class="token punctuation">.</span> ：返回上一级目录 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>ls（列出目录）  </p></blockquote><p>在linux中ls可能是最常被使用的！<br>-a参数：all, 查看全部的文件，包括隐藏的文件<br>-l参数，列出所有的文件，包含文件的属性和权限<br><strong>所有的Linux命令可以组合使用</strong>  </p><blockquote><p>cd命令 切换目录  </p></blockquote><p>cd 目录名（绝对路径都是以/开头，相对路径，相对与当前目录该如何寻找../../）<br>cd ~ 回到当前的用户目录  </p><blockquote><p>pwd 查看当前目录是什么目录  </p></blockquote><blockquote><p>mkdir 创建一个目录 </p></blockquote><p>-p参数 ： 创建多级目录 </p><blockquote><p>rmdir 删除目录  </p></blockquote><p>rmdir仅能删除空的目录，如果下面存在文件，需要先删除文件，递归删除多个目录-p参数即可  </p><blockquote><p>cp 复制文件或者目录 </p></blockquote><p>cp 原来的目录 新的目录  </p><blockquote><p>rm 移除文件或目录 </p></blockquote><p>-f 忽略不存在的文件，不会出现警告，<strong>强制删除！</strong><br>-r 递归删除目录！<br>-i 互动，删除询问是否删除 </p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">rm</span> <span class="token operator">-</span>rf <span class="token operator">/</span> <span class="token comment" spellcheck="true">#系统中所有的文件就被删除了，删库跑路就是这么操作的！</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>mv 移动文件或者目录 ！<strong>重命名文件</strong></p></blockquote><p>-f 强制<br>-u 只替换已经更新过的文件  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记一</title>
      <link href="/posts/37102.html"/>
      <url>/posts/37102.html</url>
      
        <content type="html"><![CDATA[<p><em>Linux 一切皆文件：文件就读、写、（权限）</em><br><strong>基于CentOS 7版本</strong><br><strong>学习方式</strong>   </p><ol><li>认识Linux </li><li>基本的命令（重点：文件操作、目录管理、文件属性、Vim编辑器、账号管理、磁盘管理…） </li><li>软件的安装和部署！（java、tomcat、docker）   </li></ol><blockquote><p>Linux简介 </p></blockquote><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口） 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。   </p><blockquote><p>Linux发行版 </p></blockquote><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907171301.png" alt=""> </p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。 </p><blockquote><p>Linux应用领域  </p></blockquote><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><blockquote><p>参考：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;mid=2247483879&amp;idx=1&amp;sn=96181b566c35679e48db6bd26fb59a2c&amp;scene=19#wechat_redirect">狂神说Java系列</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记二</title>
      <link href="/posts/4053.html"/>
      <url>/posts/4053.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907150510.png" alt="">  </p><p><strong>镜像(image)：</strong><br> docker镜像就好比是一个模板，可以通过这个模板创建容器服务，tomcat镜像===&gt; run ===&gt; tomcat01容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。<br><strong>容器(container)：</strong><br>Docker利用容器技术，独立运行一个或一组应用，通过镜像来创建的。<br>启动，停止，删除，基本命令！<br>目前就可以把这个容器理解为简易的linux系统<br><strong>仓库(repository)：</strong><br>仓库就是存放镜像的地方！<br>仓库分为共有仓库和私有仓库！<br>Docker Hub(默认是国外的)<br>阿里云…都有容器服务（配置镜像加速！）  </p><h3 id="Docker的安装-1"><a href="#Docker的安装-1" class="headerlink" title="Docker的安装"></a>Docker的安装</h3><blockquote><p>环境准备  </p></blockquote><ol><li>需要会一点点Linux的基础  </li><li>CentOS 7  </li><li>我们使用Xshell连接远程服务器进行操作！   </li></ol><blockquote><p>环境查看  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 系统内核是 3.10 以上的 </span><span class="token punctuation">[</span>root@localhost Desktop<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># uname -r </span>3.10.0-327.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 系统版本  </span><span class="token punctuation">[</span>root@localhost Desktop<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/os-release </span>NAME<span class="token operator">=</span><span class="token string">"CentOS Linux"</span>VERSION<span class="token operator">=</span><span class="token string">"7 (Core)"</span>ID<span class="token operator">=</span><span class="token string">"centos"</span>ID_LIKE<span class="token operator">=</span><span class="token string">"rhel fedora"</span>VERSION_ID<span class="token operator">=</span><span class="token string">"7"</span>PRETTY_NAME<span class="token operator">=</span><span class="token string">"CentOS Linux 7 (Core)"</span>ANSI_COLOR<span class="token operator">=</span><span class="token string">"0;31"</span>CPE_NAME<span class="token operator">=</span><span class="token string">"cpe:/o:centos:centos:7"</span>HOME_URL<span class="token operator">=</span><span class="token string">"https://www.centos.org/"</span>BUG_REPORT_URL<span class="token operator">=</span><span class="token string">"https://bugs.centos.org/"</span>CENTOS_MANTISBT_PROJECT<span class="token operator">=</span><span class="token string">"CentOS-7"</span>CENTOS_MANTISBT_PROJECT_VERSION<span class="token operator">=</span><span class="token string">"7"</span>REDHAT_SUPPORT_PRODUCT<span class="token operator">=</span><span class="token string">"centos"</span>REDHAT_SUPPORT_PRODUCT_VERSION<span class="token operator">=</span><span class="token string">"7"</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装  </p></blockquote><p>帮助文档：  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. 卸载旧的版本  </span>yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine  <span class="token comment" spellcheck="true"># 2. 需要的安装包  </span>yum <span class="token function">install</span> -y yum-utils   <span class="token comment" spellcheck="true"># 3. 设置镜像的仓库  </span>yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo  <span class="token comment" spellcheck="true">#官方给的是国外的，速度慢 </span>yum-config-manager \    --add-repo \   http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo   <span class="token comment" spellcheck="true">#推荐使用阿里云镜像，速度十分快   </span><span class="token comment" spellcheck="true"># 更新yum软件包索引 </span>yum makecache fast<span class="token comment" spellcheck="true"># 4. 安装docker相关的东西  docker-ce社区版  ee企业版</span>yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span class="token comment" spellcheck="true"># 5. 启动docker  </span>systemctl start docker<span class="token comment" spellcheck="true"># 6. 使用docker version查看是否安装成功  </span>docker version    <span class="token comment" spellcheck="true"># 7. hello-world   </span>docker run hello-world  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 8. 查看一下下载的这个 hello-world镜像  </span>docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200910092128.png" alt="">  </p><blockquote><p>了解：卸载docker   </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#1. 卸载依赖   </span>yum remove docker-ce docker-ce-cli containerd.io <span class="token comment" spellcheck="true">#2. 删除资源 </span><span class="token function">rm</span> -rf /var/lib/docker  <span class="token comment" spellcheck="true">#  /var/lib/docker  docker的默认工作路径 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h3><p>1、找到镜像加速地址  </p><p>2、配置镜像加速器  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://9gqjxoa7.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回顾HelloWorld流程"><a href="#回顾HelloWorld流程" class="headerlink" title="回顾HelloWorld流程"></a>回顾HelloWorld流程</h3><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200910125806.png" alt="">  </p><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><blockquote><p>Docker是怎么工作的？ </p></blockquote><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socker从客户端访问！  </p><p>DockerServer接收到Docker-Clinet的指令，就会执行这个命令！  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200910141037.png" alt="">  </p><blockquote><p>Docker为什么比VM快？ </p></blockquote><p>1、Docker有着比虚拟机更少的抽象层<br>2、Docker利用的是宿主机的内核，VM需要是Guest OS<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200910142146.png" alt=""> </p><p>所以说，新建一个容器的时候，docker不需要想虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载Guest OS，分钟级别的，而docker是利用宿主机的操作系统，省略了这个复杂的过程，秒级！ </p><p>之后学习完毕所有的命令，再回过头来看这段理论，就会很清晰！</p><h2 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre class="line-numbers language-bash"><code class="language-bash">docker version  <span class="token comment" spellcheck="true">#显示版本信息   </span>docker info     <span class="token comment" spellcheck="true">#显示docker的系统信息，包括镜像和容器的数量  </span>docker 命令 --help   <span class="token comment" spellcheck="true">#万能命令 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://docs.docker.com/reference/">帮助文档</a></p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><blockquote><p>docker images 查看所有本地的主机上的镜像  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Desktop<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images </span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        8 months ago        13.3kB  <span class="token comment" spellcheck="true"># 解释 </span>REPOSITORY 镜像的仓库源TAG        镜像的标签IMAGE ID   镜像的idCREATED    镜像的创建时间  SIZE       镜像的大小   <span class="token comment" spellcheck="true"># 可选项  </span>-a, --all      <span class="token comment" spellcheck="true"># 列出所有镜像       </span>-q, --quiet    <span class="token comment" spellcheck="true"># 只显示镜像的id  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker search 搜索镜像  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Desktop<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker search mysql </span>NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmysql                             MySQL is a widely used, open-source relation…   9946                <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>                mariadb                           MariaDB is a community-developed fork of MyS…   3639                <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># 可选项，通过搜索来过滤 </span>--filter<span class="token operator">=</span>STARS<span class="token operator">=</span>3000   <span class="token comment" spellcheck="true">#搜索出来的镜像就是STARS大于3000的 </span><span class="token punctuation">[</span>root@localhost Desktop<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker search mysql --filter=STARS=5000</span>NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmysql               MySQL is a widely used, open-source relation…   9946                <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker pull 下载镜像  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载镜像 docker pull 镜像名[:tag]</span><span class="token punctuation">[</span>root@localhost Desktop<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql </span>Using default tag: latest            <span class="token comment" spellcheck="true"># 如果不写tag，默认就是 latest </span>latest: Pulling from library/mysqld121f8d1c412: Pull complete         <span class="token comment" spellcheck="true"># 分层下载，docker image的核心 联合文件系统 </span>f3cebc0b4691: Pull complete 1862755a0b37: Pull complete 489b44f3dbb4: Pull complete 690874f836db: Pull complete baa8be383ffb: Pull complete 55356608b4ac: Pull complete dd35ceccb6eb: Pull complete 429b35712b19: Pull complete 162d8291095c: Pull complete 5e500ef7181b: Pull complete af7528e958b6: Pull complete Digest: sha256:e1bfe11693ed2052cb3b4e5fa356c65381129e87e38551c6cd6ec532ebe0e808  <span class="token comment" spellcheck="true"># 签名，防伪标志</span>Status: Downloaded newer image <span class="token keyword">for</span> mysql:latestdocker.io/library/mysql:latest  <span class="token comment" spellcheck="true"># 真实地址  </span><span class="token comment" spellcheck="true"># 等价于它 </span>docker pull mysql docker pull docker.io/library/mysql:latest  <span class="token comment" spellcheck="true"># 指定版本下载   </span><span class="token punctuation">[</span>root@localhost Desktop<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql:5.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200910215744.png" alt=""></p><blockquote><p>docker rmi 删除镜像  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker rmi -f 镜像的id   <span class="token comment" spellcheck="true">#删除指定的镜像</span>docker rmi -f 镜像的id 镜像的id 镜像的id   <span class="token comment" spellcheck="true">#删除多个镜像</span>docker rmi -f <span class="token variable"><span class="token variable">$(</span>docker images -aq<span class="token variable">)</span></span>    <span class="token comment" spellcheck="true">#删除所有的镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p><strong>说明：我们有了镜像才可以创建容器，Linux，下载一个centos镜像来测试学习</strong>  </p><pre class="line-numbers language-bash"><code class="language-bash">docker pull centos <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>新建容器并启动  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image  <span class="token comment" spellcheck="true"># 参数说明  </span>--name<span class="token operator">=</span><span class="token string">"Name"</span>  容器名字 tomcat01 tomcat02 用来区分容器  -d             后台方式运行-it            使用交互方式运行，进入容器查看内容-p             指定容器端口 -p 8080:8080     -p ip:主机端口:容器端口    -p 主机端口:容器端口 （常用）         -p 容器端口     容器端口 -P             随机指定端口<span class="token comment" spellcheck="true"># 测试，启动并进入容器</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it centos /bin/bash </span><span class="token punctuation">[</span>root@0e436190bf29 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls    #查看容器内的centos,基础版本，很多命令都是不完善的</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token comment" spellcheck="true"># 从容器中退回主机 </span><span class="token punctuation">[</span>root@0e436190bf29 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># exit </span><span class="token keyword">exit</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls /</span>bin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>列出所有的运行的容器  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># docker ps 命令 </span>-a <span class="token comment" spellcheck="true"># 列出当前正在运行的容器+带出历史运行过的容器  </span>-n<span class="token operator">=</span>? <span class="token comment" spellcheck="true"># 显示最近创建的容器 </span>-q  <span class="token comment" spellcheck="true"># 只显示容器的编号   </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps </span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -a </span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES0e436190bf29        centos              <span class="token string">"/bin/bash"</span>         25 minutes ago      Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> 21 minutes ago                          dreamy_gagarinf1011764535e        bf756fb1ae65        <span class="token string">"/hello"</span>            About an hour ago   Exited <span class="token punctuation">(</span>0<span class="token punctuation">)</span> About an hour ago                       exciting_wilson<span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -aq  </span>0e436190bf29f1011764535e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>退出容器 </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">exit</span>   <span class="token comment" spellcheck="true">#容器直接停止并退出 </span>Ctrl + P + Q  <span class="token comment" spellcheck="true"># 容容器不停止退出 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>删除容器   </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> 容器id                <span class="token comment" spellcheck="true"># 删除指定的容器，不能删除正在运行的容器， 如果要强制删除 rm -f </span>docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span>   <span class="token comment" spellcheck="true"># 删除所有的容器  </span>docker <span class="token function">ps</span> -a -q<span class="token operator">|</span><span class="token function">xargs</span> docker <span class="token function">rm</span>       <span class="token comment" spellcheck="true"># 删除所有的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>启动和停止容器的操作 </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker start 容器id      <span class="token comment" spellcheck="true"># 启动容器</span>docker restart 容器id    <span class="token comment" spellcheck="true"># 重启容器</span>docker stop 容器id      <span class="token comment" spellcheck="true"># 停止当前正在运行的容器 </span>docker <span class="token function">kill</span> 容器id      <span class="token comment" spellcheck="true"># 强制停止当前正在运行的容器 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><blockquote><p>后台启动容器 </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 命令 docker run -d 镜像名！</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d centos   </span><span class="token comment" spellcheck="true"># 问题docker ps，发现 centos 停止了 </span><span class="token comment" spellcheck="true"># 常见的坑：docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止  </span><span class="token comment" spellcheck="true"># nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看日志 </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker logs -f -t -tail 行数 容器id  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查看容器中的进程信息 ps  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 命令 docker top 容器id  </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker top 0926bd4f4c1b</span>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                15076               15059               0                   11:26               pts/0               00:00:00            /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看镜像的元数据  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 命令 docker inspect 容器id  </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker inspect 0926bd4f4c1b</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"Id"</span><span class="token keyword">:</span> <span class="token string">"0926bd4f4c1b0385ec9ad6e996c8cae09170f99637fc2ca300d85fe605043b95"</span>,        <span class="token string">"Created"</span><span class="token keyword">:</span> <span class="token string">"2020-09-11T03:25:11.846469352Z"</span>,        <span class="token string">"Path"</span><span class="token keyword">:</span> <span class="token string">"/bin/bash"</span>,        <span class="token string">"Args"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,        <span class="token string">"State"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Status"</span><span class="token keyword">:</span> <span class="token string">"running"</span>,            <span class="token string">"Running"</span><span class="token keyword">:</span> true,            <span class="token string">"Paused"</span><span class="token keyword">:</span> false,            <span class="token string">"Restarting"</span><span class="token keyword">:</span> false,            <span class="token string">"OOMKilled"</span><span class="token keyword">:</span> false,            <span class="token string">"Dead"</span><span class="token keyword">:</span> false,            <span class="token string">"Pid"</span><span class="token keyword">:</span> 15076,            <span class="token string">"ExitCode"</span><span class="token keyword">:</span> 0,            <span class="token string">"Error"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"StartedAt"</span><span class="token keyword">:</span> <span class="token string">"2020-09-11T03:26:37.380363456Z"</span>,            <span class="token string">"FinishedAt"</span><span class="token keyword">:</span> <span class="token string">"2020-09-11T03:26:15.439746877Z"</span>        <span class="token punctuation">}</span>,        <span class="token string">"Image"</span><span class="token keyword">:</span> <span class="token string">"sha256:0d120b6ccaa8c5e149176798b3501d4dd1885f961922497cd0abef155c869566"</span>,        <span class="token string">"ResolvConfPath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/0926bd4f4c1b0385ec9ad6e996c8cae09170f99637fc2ca300d85fe605043b95/resolv.conf"</span>,        <span class="token string">"HostnamePath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/0926bd4f4c1b0385ec9ad6e996c8cae09170f99637fc2ca300d85fe605043b95/hostname"</span>,        <span class="token string">"HostsPath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/0926bd4f4c1b0385ec9ad6e996c8cae09170f99637fc2ca300d85fe605043b95/hosts"</span>,        <span class="token string">"LogPath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/0926bd4f4c1b0385ec9ad6e996c8cae09170f99637fc2ca300d85fe605043b95/0926bd4f4c1b0385ec9ad6e996c8cae09170f99637fc2ca300d85fe605043b95-json.log"</span>,        <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"/hungry_meitner"</span>,        <span class="token string">"RestartCount"</span><span class="token keyword">:</span> 0,        <span class="token string">"Driver"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>,        <span class="token string">"Platform"</span><span class="token keyword">:</span> <span class="token string">"linux"</span>,        <span class="token string">"MountLabel"</span><span class="token keyword">:</span> <span class="token string">""</span>,        <span class="token string">"ProcessLabel"</span><span class="token keyword">:</span> <span class="token string">""</span>,        <span class="token string">"AppArmorProfile"</span><span class="token keyword">:</span> <span class="token string">""</span>,        <span class="token string">"ExecIDs"</span><span class="token keyword">:</span> null,        <span class="token string">"HostConfig"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Binds"</span><span class="token keyword">:</span> null,            <span class="token string">"ContainerIDFile"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"LogConfig"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"Type"</span><span class="token keyword">:</span> <span class="token string">"json-file"</span>,                <span class="token string">"Config"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>,            <span class="token string">"NetworkMode"</span><span class="token keyword">:</span> <span class="token string">"default"</span>,            <span class="token string">"PortBindings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,            <span class="token string">"RestartPolicy"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"no"</span>,                <span class="token string">"MaximumRetryCount"</span><span class="token keyword">:</span> 0            <span class="token punctuation">}</span>,            <span class="token string">"AutoRemove"</span><span class="token keyword">:</span> false,            <span class="token string">"VolumeDriver"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"VolumesFrom"</span><span class="token keyword">:</span> null,            <span class="token string">"CapAdd"</span><span class="token keyword">:</span> null,            <span class="token string">"CapDrop"</span><span class="token keyword">:</span> null,            <span class="token string">"Capabilities"</span><span class="token keyword">:</span> null,            <span class="token string">"Dns"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DnsOptions"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DnsSearch"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"ExtraHosts"</span><span class="token keyword">:</span> null,            <span class="token string">"GroupAdd"</span><span class="token keyword">:</span> null,            <span class="token string">"IpcMode"</span><span class="token keyword">:</span> <span class="token string">"private"</span>,            <span class="token string">"Cgroup"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Links"</span><span class="token keyword">:</span> null,            <span class="token string">"OomScoreAdj"</span><span class="token keyword">:</span> 0,            <span class="token string">"PidMode"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Privileged"</span><span class="token keyword">:</span> false,            <span class="token string">"PublishAllPorts"</span><span class="token keyword">:</span> false,            <span class="token string">"ReadonlyRootfs"</span><span class="token keyword">:</span> false,            <span class="token string">"SecurityOpt"</span><span class="token keyword">:</span> null,            <span class="token string">"UTSMode"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"UsernsMode"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"ShmSize"</span><span class="token keyword">:</span> 67108864,            <span class="token string">"Runtime"</span><span class="token keyword">:</span> <span class="token string">"runc"</span>,            <span class="token string">"ConsoleSize"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                0,                0            <span class="token punctuation">]</span>,            <span class="token string">"Isolation"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"CpuShares"</span><span class="token keyword">:</span> 0,            <span class="token string">"Memory"</span><span class="token keyword">:</span> 0,            <span class="token string">"NanoCpus"</span><span class="token keyword">:</span> 0,            <span class="token string">"CgroupParent"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"BlkioWeight"</span><span class="token keyword">:</span> 0,            <span class="token string">"BlkioWeightDevice"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"BlkioDeviceReadBps"</span><span class="token keyword">:</span> null,            <span class="token string">"BlkioDeviceWriteBps"</span><span class="token keyword">:</span> null,            <span class="token string">"BlkioDeviceReadIOps"</span><span class="token keyword">:</span> null,            <span class="token string">"BlkioDeviceWriteIOps"</span><span class="token keyword">:</span> null,            <span class="token string">"CpuPeriod"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuQuota"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuRealtimePeriod"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuRealtimeRuntime"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpusetCpus"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"CpusetMems"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Devices"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DeviceCgroupRules"</span><span class="token keyword">:</span> null,            <span class="token string">"DeviceRequests"</span><span class="token keyword">:</span> null,            <span class="token string">"KernelMemory"</span><span class="token keyword">:</span> 0,            <span class="token string">"KernelMemoryTCP"</span><span class="token keyword">:</span> 0,            <span class="token string">"MemoryReservation"</span><span class="token keyword">:</span> 0,            <span class="token string">"MemorySwap"</span><span class="token keyword">:</span> 0,            <span class="token string">"MemorySwappiness"</span><span class="token keyword">:</span> null,            <span class="token string">"OomKillDisable"</span><span class="token keyword">:</span> false,            <span class="token string">"PidsLimit"</span><span class="token keyword">:</span> null,            <span class="token string">"Ulimits"</span><span class="token keyword">:</span> null,            <span class="token string">"CpuCount"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuPercent"</span><span class="token keyword">:</span> 0,            <span class="token string">"IOMaximumIOps"</span><span class="token keyword">:</span> 0,            <span class="token string">"IOMaximumBandwidth"</span><span class="token keyword">:</span> 0,            <span class="token string">"MaskedPaths"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"/proc/asound"</span>,                <span class="token string">"/proc/acpi"</span>,                <span class="token string">"/proc/kcore"</span>,                <span class="token string">"/proc/keys"</span>,                <span class="token string">"/proc/latency_stats"</span>,                <span class="token string">"/proc/timer_list"</span>,                <span class="token string">"/proc/timer_stats"</span>,                <span class="token string">"/proc/sched_debug"</span>,                <span class="token string">"/proc/scsi"</span>,                <span class="token string">"/sys/firmware"</span>            <span class="token punctuation">]</span>,            <span class="token string">"ReadonlyPaths"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"/proc/bus"</span>,                <span class="token string">"/proc/fs"</span>,                <span class="token string">"/proc/irq"</span>,                <span class="token string">"/proc/sys"</span>,                <span class="token string">"/proc/sysrq-trigger"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>,        <span class="token string">"GraphDriver"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Data"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"LowerDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/107a7c5cddbd6a4b2d393efdd4c2b20162408de28075a350f064a034e8aeeaf3-init/diff:/var/lib/docker/overlay2/fad9a8dbac2c6b86ba1b83b482cfbf591fabcbf379d66aa5fde0024059112365/diff"</span>,                <span class="token string">"MergedDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/107a7c5cddbd6a4b2d393efdd4c2b20162408de28075a350f064a034e8aeeaf3/merged"</span>,                <span class="token string">"UpperDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/107a7c5cddbd6a4b2d393efdd4c2b20162408de28075a350f064a034e8aeeaf3/diff"</span>,                <span class="token string">"WorkDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/107a7c5cddbd6a4b2d393efdd4c2b20162408de28075a350f064a034e8aeeaf3/work"</span>            <span class="token punctuation">}</span>,            <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>        <span class="token punctuation">}</span>,        <span class="token string">"Mounts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,        <span class="token string">"Config"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Hostname"</span><span class="token keyword">:</span> <span class="token string">"0926bd4f4c1b"</span>,            <span class="token string">"Domainname"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"User"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"AttachStdin"</span><span class="token keyword">:</span> true,            <span class="token string">"AttachStdout"</span><span class="token keyword">:</span> true,            <span class="token string">"AttachStderr"</span><span class="token keyword">:</span> true,            <span class="token string">"Tty"</span><span class="token keyword">:</span> true,            <span class="token string">"OpenStdin"</span><span class="token keyword">:</span> true,            <span class="token string">"StdinOnce"</span><span class="token keyword">:</span> true,            <span class="token string">"Env"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Cmd"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"/bin/bash"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Image"</span><span class="token keyword">:</span> <span class="token string">"centos"</span>,            <span class="token string">"Volumes"</span><span class="token keyword">:</span> null,            <span class="token string">"WorkingDir"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Entrypoint"</span><span class="token keyword">:</span> null,            <span class="token string">"OnBuild"</span><span class="token keyword">:</span> null,            <span class="token string">"Labels"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"org.label-schema.build-date"</span><span class="token keyword">:</span> <span class="token string">"20200809"</span>,                <span class="token string">"org.label-schema.license"</span><span class="token keyword">:</span> <span class="token string">"GPLv2"</span>,                <span class="token string">"org.label-schema.name"</span><span class="token keyword">:</span> <span class="token string">"CentOS Base Image"</span>,                <span class="token string">"org.label-schema.schema-version"</span><span class="token keyword">:</span> <span class="token string">"1.0"</span>,                <span class="token string">"org.label-schema.vendor"</span><span class="token keyword">:</span> <span class="token string">"CentOS"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"NetworkSettings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Bridge"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"SandboxID"</span><span class="token keyword">:</span> <span class="token string">"fdba0b9e70f37ffb69b3e4b6e275a97e8301cdff37cbb2ceb736f820d52321c6"</span>,            <span class="token string">"HairpinMode"</span><span class="token keyword">:</span> false,            <span class="token string">"LinkLocalIPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"LinkLocalIPv6PrefixLen"</span><span class="token keyword">:</span> 0,            <span class="token string">"Ports"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,            <span class="token string">"SandboxKey"</span><span class="token keyword">:</span> <span class="token string">"/var/run/docker/netns/fdba0b9e70f3"</span>,            <span class="token string">"SecondaryIPAddresses"</span><span class="token keyword">:</span> null,            <span class="token string">"SecondaryIPv6Addresses"</span><span class="token keyword">:</span> null,            <span class="token string">"EndpointID"</span><span class="token keyword">:</span> <span class="token string">"fcb648ac281376ab2f0615f986590d11705c1e229737db9c644170695cf9a2b9"</span>,            <span class="token string">"Gateway"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.1"</span>,            <span class="token string">"GlobalIPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"GlobalIPv6PrefixLen"</span><span class="token keyword">:</span> 0,            <span class="token string">"IPAddress"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.2"</span>,            <span class="token string">"IPPrefixLen"</span><span class="token keyword">:</span> 16,            <span class="token string">"IPv6Gateway"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"MacAddress"</span><span class="token keyword">:</span> <span class="token string">"02:42:ac:11:00:02"</span>,            <span class="token string">"Networks"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"bridge"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                    <span class="token string">"IPAMConfig"</span><span class="token keyword">:</span> null,                    <span class="token string">"Links"</span><span class="token keyword">:</span> null,                    <span class="token string">"Aliases"</span><span class="token keyword">:</span> null,                    <span class="token string">"NetworkID"</span><span class="token keyword">:</span> <span class="token string">"dd86007737868578e7ce527384c8d73e34baaf03c6de8b2baeca9acf9282d6eb"</span>,                    <span class="token string">"EndpointID"</span><span class="token keyword">:</span> <span class="token string">"fcb648ac281376ab2f0615f986590d11705c1e229737db9c644170695cf9a2b9"</span>,                    <span class="token string">"Gateway"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.1"</span>,                    <span class="token string">"IPAddress"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.2"</span>,                    <span class="token string">"IPPrefixLen"</span><span class="token keyword">:</span> 16,                    <span class="token string">"IPv6Gateway"</span><span class="token keyword">:</span> <span class="token string">""</span>,                    <span class="token string">"GlobalIPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>,                    <span class="token string">"GlobalIPv6PrefixLen"</span><span class="token keyword">:</span> 0,                    <span class="token string">"MacAddress"</span><span class="token keyword">:</span> <span class="token string">"02:42:ac:11:00:02"</span>,                    <span class="token string">"DriverOpts"</span><span class="token keyword">:</span> null                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>进入当前正在运行的容器    </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 我们通常容器都是使用后台方式启动的，需要进入容器，修改一些配置 </span><span class="token comment" spellcheck="true"># 命令   </span>docker <span class="token function">exec</span> -it 容器id /bin/bash  <span class="token comment" spellcheck="true"># 测试</span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -a </span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES0926bd4f4c1b        centos              <span class="token string">"/bin/bash"</span>         12 hours ago        Up 12 hours                             hungry_meitner<span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it 0926bd4f4c1b /bin/bash </span><span class="token punctuation">[</span>root@0926bd4f4c1b /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls </span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token punctuation">[</span>root@0926bd4f4c1b /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef  </span>UID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 03:26 pts/0    00:00:00 /bin/bashroot        14     0  0 15:11 pts/1    00:00:00 /bin/bashroot        28    14  0 15:11 pts/1    00:00:00 <span class="token function">ps</span> -ef<span class="token comment" spellcheck="true"># 方式二 </span>docker attach 容器id <span class="token comment" spellcheck="true"># 测试 </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker attach 0926bd4f4c1b  </span>正在执行当前的代码<span class="token punctuation">..</span>.  <span class="token comment" spellcheck="true"># docker exec  # 进入容器后开启一个新的终端，可以在里面操作（常用）</span><span class="token comment" spellcheck="true"># docker attach   # 进入容器正在执行的终端，不会启动新的进程！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从容器内拷贝文件到主机上  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">cp</span> 容器id:容器内路径 目的的主机路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现，自动同步， /home  /home</em>    </p><p><strong>学习方式：将我的所有命令全部敲一遍，自己记录笔记</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200911234613.png" alt="">  </p><pre class="line-numbers language-bash"><code class="language-bash">attach    Attach to a running containe                  <span class="token comment" spellcheck="true"># 当前sheT下 attach连接指定运行镜像 </span>build     Build an image from a Dockerfile              <span class="token comment" spellcheck="true"># 通过 Dockerfi1e定制镜像</span>commit    Create a new image from a container changes   <span class="token comment" spellcheck="true"># 提交当前容器为新的镜像  </span><span class="token function">cp</span>        Copy files/ folders from the containers filesystem to the host path    <span class="token comment" spellcheck="true"># 从容器中拷贝指定文件或者目录到宿主机中 </span>create    Create a new container                        <span class="token comment" spellcheck="true"># 创建一个新的容器，同run，但不启动容器  </span><span class="token function">diff</span>      Inspect changes on a container's filesystem   <span class="token comment" spellcheck="true"># 查看 docker容器变化     </span>events    Get real <span class="token function">time</span> events from the server          <span class="token comment" spellcheck="true"># 从 docker服务获取容器实时事件</span><span class="token function">exec</span>      Run a <span class="token function">command</span> <span class="token keyword">in</span> an existing contain          <span class="token comment" spellcheck="true"># 在已存在的容器上运行命令  </span><span class="token function">export</span>    Stream the contents of a container as a <span class="token function">tar</span> archive      <span class="token comment" spellcheck="true"># 导出容器的内容流作为一个tar归档文件[对应import]   </span><span class="token function">history</span>   Show the <span class="token function">history</span> of an image                  <span class="token comment" spellcheck="true"># 展示一个镜像形成历史  </span>images    List imades                                   <span class="token comment" spellcheck="true"># 列出系统当前镜像  </span><span class="token function">import</span>    Create a new filesystem image from the contents of a tarba1l   <span class="token comment" spellcheck="true"># 从tar包中的内容创建一个新的文件系统映像[对应 export] </span>info      Display system-wide information               <span class="token comment" spellcheck="true"># 显示系统相关信息  </span>inspect   Return1ow- level information on a container   <span class="token comment" spellcheck="true"># 查看容器详细信息  </span><span class="token function">kill</span>      Kill a running container                      <span class="token comment" spellcheck="true"># ki11指定 docker 容器  </span>load      Load an image from a <span class="token function">tar</span> archive              <span class="token comment" spellcheck="true"># 从一个tar包中加载一个镜像[对应save]  </span>login     Register or Login to the docker registry server  <span class="token comment" spellcheck="true"># 注册或者登陆一个 docker源服务器  </span><span class="token function">logout</span>    Log out from a Docker registry serve          <span class="token comment" spellcheck="true"># 并从当前 Docker registry退出  </span>logs      Fetch the logs of a container                 <span class="token comment" spellcheck="true"># 输出当前容器日志信息  </span>port      Lookup the public- facing port <span class="token function">which</span> is NAT- ed to PRIVATE_PORT <span class="token comment" spellcheck="true"># 查看映射端口对应的容器内部源端口</span>pause     Pause all processes within a container        <span class="token comment" spellcheck="true"># 暂停容器 </span><span class="token function">ps</span>        List containers                               <span class="token comment" spellcheck="true"># 列出容器列表 </span>pull      Pull an image or a repository from the docker registry server <span class="token comment" spellcheck="true"># 从dockers镜像源服务器拉取指定镜像或者库镜像 </span>push      Push an image or a repos itory to the docker registry server  <span class="token comment" spellcheck="true"># 推送指定镜像或者库镜像至docker源服务器 </span>restart   Restart a running container                   <span class="token comment" spellcheck="true"># 重启运行的容器</span><span class="token function">rm</span>        Remove one or <span class="token function">more</span> containers                 <span class="token comment" spellcheck="true"># 移除一个或者多个容器  </span>rmi       Remove one or <span class="token function">more</span> lmages                     <span class="token comment" spellcheck="true"># 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-f强制删除]  </span>run       Run a Command <span class="token keyword">in</span> a new container              <span class="token comment" spellcheck="true"># 创建一个新的容器并运行一个命令  </span>save      Save an image to a <span class="token function">tar</span> archive                <span class="token comment" spellcheck="true"># 保存一个镜像为一个tar包[对应 load]  </span>search    Search <span class="token keyword">for</span> an image on the Docker Hub         <span class="token comment" spellcheck="true"># 在 docker hub 中搜素镜像  </span>start     Start a stopped container                     <span class="token comment" spellcheck="true"># 启动容器 </span>stop      Stop a running containers                     <span class="token comment" spellcheck="true"># 停止容器  </span>tag       Image into a repository                       <span class="token comment" spellcheck="true"># 给源中镜像打标签</span><span class="token function">top</span>       Lookup the running processes of a container   <span class="token comment" spellcheck="true"># 查看容器中运行的进程信息  </span>unpause   Unpause a paused containe                     <span class="token comment" spellcheck="true"># 取消暂停容器 </span>version   Show the docker version information           <span class="token comment" spellcheck="true"># 查看 docker版本号  </span><span class="token function">wait</span>      Block <span class="token keyword">until</span> a container stops, <span class="token keyword">then</span> print its <span class="token keyword">exit</span> code      <span class="token comment" spellcheck="true"># 截取容器停止时的退出状态值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>docker的命令是十分多的，上面我们学习的那些都是最常用的容器和镜像的命令，之后我们还会学习很多命令</em>  </p><p><em>接下来就是一堆的练习</em>  </p><h3 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h3><blockquote><p>Docker 安装Nginx    </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">1、搜索镜像  search, 建议大家去docker搜索，可以看到帮助文档 2、下载镜像  pull 3、运行测试 <span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images </span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEnginx               latest              7e4d58f0e5f3        42 hours ago        133MBcentos              latest              0d120b6ccaa8        4 weeks ago         215MB<span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps </span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="token comment" spellcheck="true"># -d 后台运行  </span><span class="token comment" spellcheck="true"># --name 给容器命名  </span><span class="token comment" spellcheck="true"># -p 宿主机端口，容器内部端口  </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d --name nginx01 -p 3344:80 nginx </span>b113bcb2d783633c74e9486e4574439d211cc948042bb59cc40a5d46d07c6c26<span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps </span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMESb113bcb2d783        nginx               <span class="token string">"/docker-entrypoint.…"</span>   4 seconds ago       Up 3 seconds        0.0.0.0:3344-<span class="token operator">></span>80/tcp   nginx01<span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl localhost:3344    </span><span class="token comment" spellcheck="true"># 进去容器  </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it nginx01 /bin/bash </span>root@b113bcb2d783:/<span class="token comment" spellcheck="true"># whereis nginx </span>nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginxroot@b113bcb2d783:/<span class="token comment" spellcheck="true"># cd /etc/nginx </span>root@b113bcb2d783:/etc/nginx<span class="token comment" spellcheck="true"># ls </span>conf.d    fastcgi_params    koi-utf  koi-win  mime.types  modules  nginx.conf  scgi_params    uwsgi_params  win-utfroot@b113bcb2d783:/etc/nginx<span class="token comment" spellcheck="true">#   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>端口暴露的概念</strong> </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200912144129.png" alt="">     </p><p>思考问题：我们每次改动nginx配置文件，都需要进入容器内部？十分的麻烦，我要是可以在容器外部提供一个映射路径，达到在容器修改文件名，容器内部就可以自动修改？ -v 数据卷的技术  </p><blockquote><p>作业：docker来装一个tomcat   </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 官方的使用 </span><span class="token comment" spellcheck="true"># 我们之前的启动都是后台，停止了容器之后，容器还是可以查到  docker run -it --rm, 一般用来测试，用完就删除  </span>docker run -it --rm tomcat:9.0   <span class="token comment" spellcheck="true"># 下载启动 </span>docker pull tomcat  <span class="token comment" spellcheck="true"># 启动运行  </span>docker run -p --name tomcat01 -p 3344:8080 tomcat  <span class="token comment" spellcheck="true"># 测试访问没有问题  </span><span class="token comment" spellcheck="true"># 进入容器 </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it tomcat01 /bin/bash </span><span class="token comment" spellcheck="true"># 发现问题：1、linux命令少了   2、没有webapps  阿里云镜像的原因。默认是最小的镜像，所有不必要的都剔除掉。 </span><span class="token comment" spellcheck="true"># 保证最小可运行的环境！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考问题：我们以后要部署项目，如果每次都要进入容器是不是十分麻烦？我要是可以在容器外部提供一个映射路径，webapps，我们在外部放置项目，就自动同步到内部就好了！  </p><blockquote><p>作业：部署es+kibana  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># es 暴露的端口很多！ </span><span class="token comment" spellcheck="true"># es 十分的耗内存  </span><span class="token comment" spellcheck="true"># es 的数据一般需要放置到安全目录！挂载  </span><span class="token comment" spellcheck="true"># --net somenetwork ？ 网络配置 </span><span class="token comment" spellcheck="true"># 启动elasticsearch</span>docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e <span class="token string">"discovery.type=single-node"</span> elasticsearch:7.6.2 <span class="token comment" spellcheck="true"># 启动了 linux就卡住了  docker stats 查看cpu的状态  </span><span class="token comment" spellcheck="true"># 测试一下es是否成功   </span><span class="token punctuation">[</span>root@iZ2zedqh9q8l3gqt7244r0Z home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># curl localhost:9200</span><span class="token punctuation">{</span>  <span class="token string">"name"</span> <span class="token keyword">:</span> <span class="token string">"fe7bfb3cb3c3"</span>,  <span class="token string">"cluster_name"</span> <span class="token keyword">:</span> <span class="token string">"docker-cluster"</span>,  <span class="token string">"cluster_uuid"</span> <span class="token keyword">:</span> <span class="token string">"j0_NUj_cQwO_gE6YSEq1GA"</span>,  <span class="token string">"version"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"number"</span> <span class="token keyword">:</span> <span class="token string">"7.6.2"</span>,    <span class="token string">"build_flavor"</span> <span class="token keyword">:</span> <span class="token string">"default"</span>,    <span class="token string">"build_type"</span> <span class="token keyword">:</span> <span class="token string">"docker"</span>,    <span class="token string">"build_hash"</span> <span class="token keyword">:</span> <span class="token string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,    <span class="token string">"build_date"</span> <span class="token keyword">:</span> <span class="token string">"2020-03-26T06:34:37.794943Z"</span>,    <span class="token string">"build_snapshot"</span> <span class="token keyword">:</span> false,    <span class="token string">"lucene_version"</span> <span class="token keyword">:</span> <span class="token string">"8.4.0"</span>,    <span class="token string">"minimum_wire_compatibility_version"</span> <span class="token keyword">:</span> <span class="token string">"6.8.0"</span>,    <span class="token string">"minimum_index_compatibility_version"</span> <span class="token keyword">:</span> <span class="token string">"6.0.0-beta1"</span>  <span class="token punctuation">}</span>,  <span class="token string">"tagline"</span> <span class="token keyword">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 赶紧关闭，增加内存的限制，修改配置文件 -e 环境配置修改  </span>docker run -d --name elasticsearch02 -p 9200:9200 -p 9300:9300 -e <span class="token string">"discovery.type=single-node"</span> -e ES_JAVA_OPTS<span class="token operator">=</span><span class="token string">'-Xms64m -Xmx512m'</span> elasticsearch:7.6.2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200912200558.png" alt="">   </p><blockquote><p>作业：使用kibana连接es？思考网络如果才能连接过去！  </p></blockquote><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><ul><li>portainer（先用这个） </li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker run -d -p 8088:9000 \ --restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock --privileged<span class="token operator">=</span>true portainer/portainer <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Rancher（CI/CD再用）  </li></ul><p><strong>什么是portainer？</strong><br>Docker图形化界面管理工具！提供一个后台面板供我们操作！不建议使用</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d -p 8088:9000 \ --restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock --privileged<span class="token operator">=</span>true portainer/portainer <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问测试：外网：<a href="http://ip:8088">http://ip:8088</a>  </p><p>通过它来访问了：  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200912221609.png" alt=""></p><p>选择本地的： </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200912221814.png" alt="">  </p><p>进入之后的面板：  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200912221909.png" alt="">    </p><p>可视化面板我们平时不会使用，大家自己测试玩玩即可。   </p><blockquote><p>对应的视频课：<a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=7">狂神学Java</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记一</title>
      <link href="/posts/61265.html"/>
      <url>/posts/61265.html</url>
      
        <content type="html"><![CDATA[<p><strong>只要学不死，就往死里学</strong></p><blockquote><p>Docker学习  </p></blockquote><ul><li>Docker概述</li><li>Docker安装</li><li>Docker命令<ul><li>镜像命令</li><li>容器命令</li><li>操作命令</li><li>…</li></ul></li><li>Docker镜像！</li><li>容器数据卷！</li><li>DockerFile</li><li>Docker网络原理</li><li>IDEA整合Docker</li><li>Docker Compose</li><li>Docker Swarm</li><li>CI\CD Jenkins</li><li>…   </li></ul><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><h3 id="Docker为什么出现？"><a href="#Docker为什么出现？" class="headerlink" title="Docker为什么出现？"></a>Docker为什么出现？</h3><blockquote><p>两个问题：环境配置和隔离</p></blockquote><p>环境配置是十分麻烦的，每一个机器都需要配置环境（集群Redis、ES、Hadoop…)!费时费力。发布一个项目（jar+ Redis MySQL jdk ),项目能不能带上环境打包！<br>传统：开发jar, 运维来做！<br>现在：开发打包部署上线，一套流程做完！ </p><p>java – apk –发布 （应用商店）–张三使用apk —安装即可使用<br>jave – jar(环境) —打包项目带上环境（镜像）— （Docker仓库：商店）—下载我们发布的镜像 — 直接运行即可！  </p><p>Docker给以上的问题，提出了解决方案！ </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907110734.png" alt="Docker官方图标"></p><p>Docker的思想来自集装箱！核心思想是隔离，打包装箱，通过隔离机制，可以将服务器用到极致。  </p><p>本质：所有的技术都是因为出现了一些问题，我们需要去解决，才去学习！ </p><h3 id="Docker历史"><a href="#Docker历史" class="headerlink" title="Docker历史"></a>Docker历史</h3><p>2010年，<strong>dotcloud</strong>公司,原先做pass的云计算服务，后面做容器化技术，命名为Docker。<br>2013年，<strong>开发源代码</strong>！<br>2014年4月9日，Docker1.0发布！<br>Docker为什么这么火？十分的轻巧！<br>在容器技术出现之前，我们都是使用虚拟机技术！<br>虚拟机：在window中装一个VMware，通过这个软件我们可以虚拟出来一台或多台电脑！笨重！<br>虚拟机和Docker容器都属于一种虚拟化技术！  </p><pre class="line-numbers language-powershell"><code class="language-powershell">vm: linux centos原生镜像（一个电脑！）  隔离，需要开启多个虚拟机！  几个G   几分钟 docker: 隔离， 镜像（最核心的环境 4m <span class="token operator">+</span> jdk <span class="token operator">+</span> mysql） 十分的小巧，运行镜像就可以了！ 小巧！ 几个M KB 秒级启动！ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="聊聊Docker"><a href="#聊聊Docker" class="headerlink" title="聊聊Docker"></a>聊聊Docker</h3><p>Docker是基于Go语言开发的！开源项目！<br><a href="https://www.docker.com/">官网</a><br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907113513.png" alt="">  </p><p><a href="https://docs.docker.com/">文档地址</a><br><a href="https://hub.docker.com/">仓库地址</a></p><p><a href="https://baike.baidu.com/item/Docker/13344470">百度百科</a>了解更多    </p><h3 id="Docker能干嘛"><a href="#Docker能干嘛" class="headerlink" title="Docker能干嘛"></a>Docker能干嘛</h3><blockquote><p>之前的虚拟机 </p></blockquote><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907140529.png" alt="">    </p><p>虚拟机技术缺点： </p><ol><li>资源占用多</li><li>冗余步骤多</li><li>启动很慢  </li></ol><blockquote><p>容器化技术  </p></blockquote><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907141731.png" alt="">  </p><p>比较Docker和虚拟机技术的不同：  </p><ul><li>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件 </li><li>容器内的应用直接在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了 </li><li>每个容器都是相互隔离的，每个容器都有自己的文件系统，互不影响 </li></ul><blockquote><p>DevOps (开发、运维)</p></blockquote><p><strong>应用更快速的交付和部署</strong><br>传统： 一堆帮助文档，安装程序<br>Docker: 打包镜像发布测试，一键运行  </p><p><strong>更便捷的升级和扩容</strong><br>使用了Docker之后，我们部署应用就和搭积木一样！<br>项目打包打包为一个镜像，扩展服务器A! 服务器B    </p><p><strong>更方便的系统运维</strong><br>在容器化之后，我们的开发、测试环境都是高度一致的。 </p><p><strong>更高效的计算资源利用</strong><br>Docker是内核级别的虚拟化，可以在一个物理机上运行很多的容器实例！服务器的性能可以被压榨到极致。  </p><blockquote><p> 参考视频：b站<a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=3">狂神说java</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客测试</title>
      <link href="/posts/41570.html"/>
      <url>/posts/41570.html</url>
      
        <content type="html"><![CDATA[<p>Markdown练习。PowerShell 测试。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>有序列表  </p><ol><li>第一项<ol><li>里面第一项</li><li>里面第二项</li></ol></li><li>第二项  </li></ol><p>无序列表  </p><ul><li>第一项</li><li>第二项 </li></ul><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200905105051.png" alt="图片1"> </p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>行间公式 $\lim_{x \to \infty}f(x)$  </p><p>$$<br>\lim_{x \to \infty}x^{\frac{1}{x}}=1<br>$$</p><p>$$<br>f(x)=\beta_1 x+\beta_2<br>\tag{1}<br>$$  </p><p>这是一个行间公式 $\lim_{x\to\infty}x^{\frac{1}{x}}=?$</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th>第一列</th><th align="center">第二列</th><th align="right">第三列</th></tr></thead><tbody><tr><td>1</td><td align="center">2</td><td align="right">3</td></tr><tr><td>2</td><td align="center">3</td><td align="right">4</td></tr></tbody></table><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://cn.bing.com/">必应</a>  </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> <span class="token function">cd</span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedir<span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>这是一个分割线  </p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>引用1<br>引用2<br>引用3    </p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
