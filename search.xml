<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux学习笔记四</title>
      <link href="/posts/22036.html"/>
      <url>/posts/22036.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><blockquote><p>什么是Vim编辑器    </p></blockquote><p>vim通过一些插件可以实现和IDE一样的功能！  </p><p>vim是从vi发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。尤其是Linux中，必须要会使用Vim（<strong>查看内容，编辑内容，保存内容！</strong>）  </p><p>简单的说，vi是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p><p>vim则可以说是程序开发者的一项很好用的工具。</p><p>所有的Unix Like系统都会有vi文本编辑器，其他的文本编辑器则不一定存在。  </p><p>连 vim 的官方网站 (<a href="http://www.vim.org">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。 </p><p>vim 键盘图<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200908170626.png" alt=""></p><blockquote><p>三种使用模式    </p></blockquote><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200908172407.png" alt="">  </p><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p><p>用户刚刚启动 vi/vim，便进入了命令模式。 </p><p>balabala…  </p><p><strong>用Vim打开一个文件，如果文件存在，则编辑文件；如果不存在，则创建一个文件。</strong>  </p><p><strong>想要记住的操作：</strong>   </p><ul><li>上下左右移动光标  </li><li>数字<space> 光标横向移动或 数字<enter>光标纵向移动  </enter></space></li><li>/word, ?word, n, N 搜索替换 </li><li>u, 重复动作  </li><li>:wq 保存退出 </li><li>:set nu 设置行号，代码中经常使用  </li></ul><p>以上掌握熟练即可，其余的了解或者自己测一测即可，我们平时使用VIM最多的就是修改下文件内容而已！ </p><h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><blockquote><p>简介 </p></blockquote><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先系统管理员申请一个账号，然后以这个账号的身份进入系统。  </p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行追踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。   </p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。  </p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。 </p><p>实现用户账号的管理，要完成的工作主要有如下几个方面： </p><ul><li>用户账号的添加、删除与修改  </li><li>用户口令的管理   </li><li>用户组的管理  </li></ul><blockquote><p>用户账号的管理  </p></blockquote><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。  </p><p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。 </p><blockquote><p>（root）添加账号useradd   </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">useradd</span> -选项 用户名  <span class="token comment" spellcheck="true">#其他选项看微信公众号   </span>        -m 自动创建用户的主目录 /home/<span class="token punctuation">..</span>.          -G 添加用户组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>理解一下本质：Linux中一切皆文件，这里的添加用户说白了就是往某一个文件中写入用户的信息了！  </p><p>增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件，如: /etc/shadow, /etc/group等。</p><blockquote><p>删除用户 userdel </p></blockquote><p>userdel -r 用户名  删除用户的时候将它的目录一块删掉   </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls </span>kuangshen  qzwang  test.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># userdel -r qzwang</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls </span>kuangshen  test.txt<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改用户 usermod   </p></blockquote><p>usermod 对应修改的内容 修改那个用户  </p><p>修改完毕后查看配置文件即可！  </p><blockquote><p>切换用户！  </p></blockquote><p>root用户<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200908220650.png" alt=""></p><p>普通用户<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200908221400.png" alt=""></p><p><strong>临时查看、更改主机名：hostname、hostname 主机名</strong>  </p><blockquote><p>用户的密码设置问题！ </p></blockquote><p>我们一般通过root创建用户的时候！要配置密码！ </p><p><strong>Linux上输入密码是不会显示的，并不是程序的问题</strong>   </p><p>在公司中，一般拿不到公司的root权限，都是一些分配的账号！  </p><p>如果是超级用户： </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span> username:new password:re password:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果是普通用户： </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> UNIX password: new password: re password:  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>锁定账户   </p></blockquote><p>root，比如张三辞职了！冻结这个账号，一旦冻结，这个人就登录不上系统了！  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span> -l 用户名  <span class="token comment" spellcheck="true">#锁定之后这个用户就不能登录了！  </span><span class="token function">passwd</span> -d 用户名  <span class="token comment" spellcheck="true">#没有密码也不能登录！  </span><span class="token function">passwd</span> -u 用户名  <span class="token comment" spellcheck="true">#解锁  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这以上的基本的命令，大家必须要掌握！但是自己玩的时候可以使用来学习！Linux是一个多用户的系统！</p><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>属主、属组  </p><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理（开发，测试，运维，root）。不同Linux系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。  </p><p>用户组的管理涉及用户组的添加、删除和修改。<strong>组的增加、删除和修改实际上就是对/etc/group文件的更新。</strong>    </p><blockquote><p>创建一个用户组 groupadd  </p></blockquote><p>创建完用户组后可以得到一个组的id，这个id时可以指定的！<strong>-g 520</strong>，如果不指定就是自增1   </p><blockquote><p>删除用户组 groupdel </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupdel qzwang2</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/group</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>修改用户组的权限信息和名字 groupmod -g -n  </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupmod -g 520 -n qzwang2 qzwang </span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/group</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>用户如果要切换用户组怎么办？ </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 登录当前用户  qzwang </span>$ newgrp root  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>拓展：文件的查看！（了解即可）  </p></blockquote><p>/etc/passwd  </p><p><strong>用户名:口令（登录密码）:用户标识号:组标识号:注释性描述:主目录:登录Shell</strong>     </p><p>这个文件中的每一行都代表一个用户，我们可以看到这个用户的主目录在哪，可以看到属于哪一个组！  </p><p><strong>登录口令：真正的加密后的用户口令字存放到/etc/shadow文件中，保证密码的安全性</strong>   </p><p>用户组的所有信息都存放在/etc/group文件中。  </p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><blockquote><p>df（列出文件系统整体的磁盘使用量）  du （检查磁盘空间使用量）   </p></blockquote><p>df!<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200909093527.png" alt="">   </p><p>du!  (进入到某一个文件夹)   </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">du</span>   <span class="token function">du</span> -a -h   <span class="token comment" spellcheck="true">#查看隐藏文件，按照M或G显示大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200909094808.png" alt="">  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200909095024.png" alt="">  </p><blockquote><p>Mac或者想使用Linux挂载我们的一些本底磁盘或者文件    </p></blockquote><p>mount : 挂载<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200909095605.png" alt="">   </p><p>umount -f [挂载位置] 强制卸载   </p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>Linux中一切皆文件<br><strong>（文件：读写执行（查看，创建，删除，移动，复制，编辑），权限（用户、用户组）。系统：（磁盘，进程））</strong></p><p>对用我们开发人员来说，其实Linux更多偏向于使用即可！   </p><blockquote><p>基本概念！什么时进程？  </p></blockquote><ol><li>在Linux中，每一个程序都是有自己的一个进程，每一个进程都有一个id号！</li><li>每一个进程，都会有一个父进程！ </li><li>进程可以有两种存在方式：前台！后台运行！</li><li>一般的话服务都是都是后台运行的，基本的程序都是前台运行的！  </li></ol><blockquote><p>命令  </p></blockquote><p><strong>ps:</strong>查看当前系统中正在执行的各种进程信息！<br>ps-xx ：</p><ul><li>-a ：显示当前终端运行的进程信息（当前的进程）</li><li>-u ：以用户的信息显示进程 </li><li>-x ：显示后台运行进程的参数！ </li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ps -aux 查看所有的进程  </span><span class="token function">ps</span> -aux<span class="token operator">|</span><span class="token function">grep</span> mysql<span class="token function">ps</span> -aux<span class="token operator">|</span><span class="token function">grep</span> redis<span class="token comment" spellcheck="true"># | 在Linux这个叫做管道符   A|B</span><span class="token comment" spellcheck="true"># grep 查找文件中符合条件的字符串！  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于我们来说，这里目前只需要记住一个命令即可 ps-xx|grep 进程名字！ 过滤进程信息！  </p><p><strong>ps -ef ：可以查看到父进程的信息</strong>  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> mysql <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看父进程我们一般可以通过进程树结构来查看！  </p><pre class="line-numbers language-bash"><code class="language-bash">pstree      -p 显示父id      -u 显示用户组   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结束进程：杀掉进程，等价于Windows结束任务！   </p><p>kill -9 进程的id  </p><p>但是啊，我们平时写的一个Java代码死循环了，可以选择结束进程！杀进程  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> -9 进程的id  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示强制结束该进程！   </p><blockquote><p>参考 <a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;mid=2247483895&amp;idx=1&amp;sn=b685934ee0d08b9d01cc0c35ed7fed71&amp;scene=19#wechat_redirect">狂神学Java</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记三</title>
      <link href="/posts/49384.html"/>
      <url>/posts/49384.html</url>
      
        <content type="html"><![CDATA[<h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><p>十个字母：文件类别+属主权限+属组权限+其他用户权限  </p><blockquote><p>chgrp :  更改文件属组   </p></blockquote><pre class="line-numbers language-powershell"><code class="language-powershell">chgrp <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> 属组名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。 </p><blockquote><p>chown ：更改文件属主，也可以同时改变属组  </p></blockquote><pre class="line-numbers language-powershell"><code class="language-powershell">chown <span class="token punctuation">[</span>–R<span class="token punctuation">]</span> 属主名 文件名chown <span class="token punctuation">[</span><span class="token operator">-</span>R<span class="token punctuation">]</span> 属主名：属组名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote><p>我们经常会用到文件查看命令<br>Linux系统使用一下命令查看文件的内容： </p></blockquote><ul><li><strong>cat 由第一行开始显示文件内容 ，用来读文章，或者读取配置文件，都使用cat命令</strong></li><li>tac 从最后一行开始显示，可以看出tac是cat的倒着写 </li><li><strong>nl 显示的时候，顺道输出行号！ 看代码的时候，希望显示行号！常用</strong></li><li>more 一页一页的显示文件内容 （空格代表翻页，enter代表向下看一行，:f查看行号信息）</li><li><strong>less 与more类似，但是比more更好的是，它可以往前翻页！（空格代表下翻页，上下键代表翻动页面！退出 q 命令，查找字符串 /要查询的字符 向下查询，向上查询使用 ？要查询的字符串，n继续搜寻上一个，N继续搜寻下一个）</strong></li><li>head 只看头几行 通过-n参数来控制显示几行</li><li>tail 只看尾巴几行 -n参数来控制显示几行</li></ul><p>网络配置目录：<em>cd etc/sysconfig/network-scripts/</em>   ===&gt; CentOS7系统，不同的系统不一样<br>ifconfig : 查看网络配置<br><strong>你可以使用man [命令]来查看各个命令的使用文档，如：man cp。</strong></p><h3 id="拓展：Linux链接的概念（了解即可！）"><a href="#拓展：Linux链接的概念（了解即可！）" class="headerlink" title="拓展：Linux链接的概念（了解即可！）"></a>拓展：Linux链接的概念（了解即可！）</h3><p>Linux的链接分为两种：硬链接、软链接！<br><em>硬链接</em>：A—B, 假设B是A的硬链接，那么它们指向了同一个文件！允许一个文件拥有多个路径，用户可以通过这种机制建立硬链接到一些重要文件上，防止误删除！<br><em>软链接</em>：类似Windows的快捷方式，删除源文件，快捷方式也访问不了！  </p><p><strong>ln</strong> 创建链接命令<br><strong>touch</strong> 创建文件命令<br><strong>echo</strong> 输入字符串，也可以输入到文件中  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ll</span>total 4drwx------. 14 kuangshen kuangshen 4096 Sep  7 03:34 kuangshendrwxr-xr-x.  2 root      root         6 Sep  7 07:26 qzwang<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># touch f1          # 创建一个f1文件</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln f1 f2          # 创建一个硬链接</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s f1 f3      # 创建一个软连接</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ll</span>total 4-rw-r--r--.  2 root      root         0 Sep  8 00:33 f1-rw-r--r--.  2 root      root         0 Sep  8 00:33 f2lrwxrwxrwx.  1 root      root         2 Sep  8 00:33 f3 -<span class="token operator">></span> f1drwx------. 14 kuangshen kuangshen 4096 Sep  7 03:34 kuangshendrwxr-xr-x.  2 root      root         6 Sep  7 07:26 qzwang<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "helo world" >>f1</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat f1</span>helo world<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat f2</span>helo world<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat f3</span>helo world<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -rf f1     #删除f1之后，查看f2和f3的区别</span><span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -ll</span>total 8-rw-r--r--.  1 root      root        11 Sep  8 00:36 f2lrwxrwxrwx.  1 root      root         2 Sep  8 00:33 f3 -<span class="token operator">></span> f1drwx------. 14 kuangshen kuangshen 4096 Sep  7 03:34 kuangshendrwxr-xr-x.  2 root      root         6 Sep  7 07:26 qzwang<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls </span>f2  f3  kuangshen  qzwang<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat f2</span>helo world<span class="token punctuation">[</span>root@localhost home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat f3</span>cat: f3: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;mid=2247483885&amp;idx=1&amp;sn=cf98ffb9698999abf950c55da75c60ec&amp;scene=19#wechat_redirect">狂神学Java</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记二</title>
      <link href="/posts/20554.html"/>
      <url>/posts/20554.html</url>
      
        <content type="html"><![CDATA[<h3 id="走进Linux系统"><a href="#走进Linux系统" class="headerlink" title="走进Linux系统"></a>走进Linux系统</h3><blockquote><p>开机登录   </p></blockquote><p>开机会启动许多程序。它们在Windows叫做“服务”（service）, 在Linux就叫做“守护进程”（daemom）<br>一般来说，用户的登录方式有三种： </p><ul><li>命令行登录</li><li>ssh登录</li><li>图形界面登录  </li></ul><p>最高权限账户为root,可以操作一切！ </p><blockquote><p>关机  </p></blockquote><p><strong>Linux中没有错误就代表成功</strong><br>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。<br><strong>不管关机还是重启，首先要运行sync命令，把内存中的数据写到磁盘中</strong>  </p><pre class="line-numbers language-powershell"><code class="language-powershell">sync  shutdown <span class="token comment" spellcheck="true">#关机指令，man shutdown查看用法  </span>shutdown <span class="token operator">-</span>h 10  shutdown <span class="token operator">-</span>h now  shutdown <span class="token operator">-</span>h 20:52 shutdown <span class="token operator">-</span>r now shutdown <span class="token operator">-</span>r <span class="token operator">+</span>10reboot halt  <span class="token comment" spellcheck="true"># ==  shutdown -h now     </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>系统目录结构</p></blockquote><ol><li>一切皆文件 </li><li>根目录/，所有的文件都挂载在这个节点下 </li></ol><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">ls</span> <span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>树状目录结构：<br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907212752.png" alt="">  </p><p>一下是对这些目录的解释：  </p><ul><li>/bin：bin是Binary的缩写，这个目录存放着最经常使用的命令  </li><li>/boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。（<strong>不要动</strong>） </li><li>/dev：dev是Device（设备），存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。 </li><li><strong>/etc：这个目录存放的是所有的系统管理所需要的配置文件和子目录</strong> </li><li><strong>/home：用户的主目录，在Linux中每一个用户一个自己的目录，一般目录是以用户的账号命名的</strong></li><li>/lib：这个目录存放着系统最基本的动态链接共享库，起作用类似于Windows中的DLL文件  </li><li>/lost+found：这个目录一般是空的，当系统非法关机后，这里就存放了一些文件。（存放突然关机的一些文件）</li><li>/media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</li><li>/mnt：系统提供这个目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt上，然后进入该目录就可以查看光驱里的内容了 （我们后面会把一些本地文件挂载在这个目录下）</li><li><strong>/opt：这是给主机额外安装软件所摆放的目录，比如你安装一个Oracle数据库就可以放到这个目录下。默认是空的。</strong></li><li>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息 （不用管）</li><li>/root：该目录为系统管理员，也称为超级权限者的用户主目录 </li><li>/sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序 </li><li>/srv：该目录存放一些服务启动之后需要提取的数据  </li><li>/sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs  </li><li><strong>/tmp：这个目录是用来存放一些临时文件。用完即丢的文件。可以放在这个目录下，安装包！</strong></li><li><strong>/usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似Windows下的program files目录</strong></li><li>/usr/bin：系统用户使用的应用程序 </li><li>/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。Super </li><li>/usr/src：内核源代码默认的放置目录 </li><li><strong>/var：这个目录存放着不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</strong></li><li>/run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除</li><li>/www：存放服务器网站相关的资源，环境，网站的项目 </li></ul><h3 id="常用的基本命令"><a href="#常用的基本命令" class="headerlink" title="常用的基本命令"></a>常用的基本命令</h3><h4 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h4><blockquote><p>绝对路径、相对路径  </p></blockquote><p>绝对路径是路径的全称  </p><pre class="line-numbers language-powershell"><code class="language-powershell">cd ：切换目录命令 <span class="token punctuation">.</span><span class="token operator">/</span> ：当前目录 cd <span class="token punctuation">.</span><span class="token punctuation">.</span> ：返回上一级目录 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>ls（列出目录）  </p></blockquote><p>在linux中ls可能是最常被使用的！<br>-a参数：all, 查看全部的文件，包括隐藏的文件<br>-l参数，列出所有的文件，包含文件的属性和权限<br><strong>所有的Linux命令可以组合使用</strong>  </p><blockquote><p>cd命令 切换目录  </p></blockquote><p>cd 目录名（绝对路径都是以/开头，相对路径，相对与当前目录该如何寻找../../）<br>cd ~ 回到当前的用户目录  </p><blockquote><p>pwd 查看当前目录是什么目录  </p></blockquote><blockquote><p>mkdir 创建一个目录 </p></blockquote><p>-p参数 ： 创建多级目录 </p><blockquote><p>rmdir 删除目录  </p></blockquote><p>rmdir仅能删除空的目录，如果下面存在文件，需要先删除文件，递归删除多个目录-p参数即可  </p><blockquote><p>cp 复制文件或者目录 </p></blockquote><p>cp 原来的目录 新的目录  </p><blockquote><p>rm 移除文件或目录 </p></blockquote><p>-f 忽略不存在的文件，不会出现警告，<strong>强制删除！</strong><br>-r 递归删除目录！<br>-i 互动，删除询问是否删除 </p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">rm</span> <span class="token operator">-</span>rf <span class="token operator">/</span> <span class="token comment" spellcheck="true">#系统中所有的文件就被删除了，删库跑路就是这么操作的！</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>mv 移动文件或者目录 ！<strong>重命名文件</strong></p></blockquote><p>-f 强制<br>-u 只替换已经更新过的文件  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记一</title>
      <link href="/posts/37102.html"/>
      <url>/posts/37102.html</url>
      
        <content type="html"><![CDATA[<p><em>Linux 一切皆文件：文件就读、写、（权限）</em><br><strong>基于CentOS 7版本</strong><br><strong>学习方式</strong>   </p><ol><li>认识Linux </li><li>基本的命令（重点：文件操作、目录管理、文件属性、Vim编辑器、账号管理、磁盘管理…） </li><li>软件的安装和部署！（java、tomcat、docker）   </li></ol><blockquote><p>Linux简介 </p></blockquote><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口） 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。   </p><blockquote><p>Linux发行版 </p></blockquote><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。  </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907171301.png" alt=""> </p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。 </p><blockquote><p>Linux应用领域  </p></blockquote><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><blockquote><p>参考：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;mid=2247483879&amp;idx=1&amp;sn=96181b566c35679e48db6bd26fb59a2c&amp;scene=19#wechat_redirect">狂神说Java系列</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记二</title>
      <link href="/posts/4053.html"/>
      <url>/posts/4053.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907150510.png" alt="">  </p><p><strong>镜像(image)：</strong><br> docker镜像就好比是一个模板，可以通过这个模板创建容器服务，tomcat镜像===&gt; run ===&gt; tomcat01容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。<br><strong>容器(container)：</strong><br>Docker利用容器技术，独立运行一个或一组应用，通过镜像来创建的。<br>启动，停止，删除，基本命令！<br>目前就可以把这个容器理解为简易的linux系统<br><strong>仓库(repository)：</strong><br>仓库就是存放镜像的地方！<br>仓库分为共有仓库和私有仓库！<br>Docker Hub(默认是国外的)<br>阿里云…都有容器服务（配置镜像加速！）  </p><h3 id="Docker的安装-1"><a href="#Docker的安装-1" class="headerlink" title="Docker的安装"></a>Docker的安装</h3><blockquote><p>环境准备  </p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记一</title>
      <link href="/posts/61265.html"/>
      <url>/posts/61265.html</url>
      
        <content type="html"><![CDATA[<p><strong>只要学不死，就往死里学</strong></p><blockquote><p>Docker学习  </p></blockquote><ul><li>Docker概述</li><li>Docker安装</li><li>Docker命令<ul><li>镜像命令</li><li>容器命令</li><li>操作命令</li><li>…</li></ul></li><li>Docker镜像！</li><li>容器数据卷！</li><li>DockerFile</li><li>Docker网络原理</li><li>IDEA整合Docker</li><li>Docker Compose</li><li>Docker Swarm</li><li>CI\CD Jenkins</li><li>…   </li></ul><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><h3 id="Docker为什么出现？"><a href="#Docker为什么出现？" class="headerlink" title="Docker为什么出现？"></a>Docker为什么出现？</h3><blockquote><p>两个问题：环境配置和隔离</p></blockquote><p>环境配置是十分麻烦的，每一个机器都需要配置环境（集群Redis、ES、Hadoop…)!费时费力。发布一个项目（jar+ Redis MySQL jdk ),项目能不能带上环境打包！<br>传统：开发jar, 运维来做！<br>现在：开发打包部署上线，一套流程做完！ </p><p>java – apk –发布 （应用商店）–张三使用apk —安装即可使用<br>jave – jar(环境) —打包项目带上环境（镜像）— （Docker仓库：商店）—下载我们发布的镜像 — 直接运行即可！  </p><p>Docker给以上的问题，提出了解决方案！ </p><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907110734.png" alt="Docker官方图标"></p><p>Docker的思想来自集装箱！核心思想是隔离，打包装箱，通过隔离机制，可以将服务器用到极致。  </p><p>本质：所有的技术都是因为出现了一些问题，我们需要去解决，才去学习！ </p><h3 id="Docker历史"><a href="#Docker历史" class="headerlink" title="Docker历史"></a>Docker历史</h3><p>2010年，<strong>dotcloud</strong>公司,原先做pass的云计算服务，后面做容器化技术，命名为Docker。<br>2013年，<strong>开发源代码</strong>！<br>2014年4月9日，Docker1.0发布！<br>Docker为什么这么火？十分的轻巧！<br>在容器技术出现之前，我们都是使用虚拟机技术！<br>虚拟机：在window中装一个VMware，通过这个软件我们可以虚拟出来一台或多台电脑！笨重！<br>虚拟机和Docker容器都属于一种虚拟化技术！  </p><pre class="line-numbers language-powershell"><code class="language-powershell">vm: linux centos原生镜像（一个电脑！）  隔离，需要开启多个虚拟机！  几个G   几分钟 docker: 隔离， 镜像（最核心的环境 4m <span class="token operator">+</span> jdk <span class="token operator">+</span> mysql） 十分的小巧，运行镜像就可以了！ 小巧！ 几个M KB 秒级启动！ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="聊聊Docker"><a href="#聊聊Docker" class="headerlink" title="聊聊Docker"></a>聊聊Docker</h3><p>Docker是基于Go语言开发的！开源项目！<br><a href="https://www.docker.com/">官网</a><br><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907113513.png" alt="">  </p><p><a href="https://docs.docker.com/">文档地址</a><br><a href="https://hub.docker.com/">仓库地址</a></p><p><a href="https://baike.baidu.com/item/Docker/13344470">百度百科</a>了解更多    </p><h3 id="Docker能干嘛"><a href="#Docker能干嘛" class="headerlink" title="Docker能干嘛"></a>Docker能干嘛</h3><blockquote><p>之前的虚拟机 </p></blockquote><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907140529.png" alt="">    </p><p>虚拟机技术缺点： </p><ol><li>资源占用多</li><li>冗余步骤多</li><li>启动很慢  </li></ol><blockquote><p>容器化技术  </p></blockquote><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200907141731.png" alt="">  </p><p>比较Docker和虚拟机技术的不同：  </p><ul><li>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件 </li><li>容器内的应用直接在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了 </li><li>每个容器都是相互隔离的，每个容器都有自己的文件系统，互不影响 </li></ul><blockquote><p>DevOps (开发、运维)</p></blockquote><p><strong>应用更快速的交付和部署</strong><br>传统： 一堆帮助文档，安装程序<br>Docker: 打包镜像发布测试，一键运行  </p><p><strong>更便捷的升级和扩容</strong><br>使用了Docker之后，我们部署应用就和搭积木一样！<br>项目打包打包为一个镜像，扩展服务器A! 服务器B    </p><p><strong>更方便的系统运维</strong><br>在容器化之后，我们的开发、测试环境都是高度一致的。 </p><p><strong>更高效的计算资源利用</strong><br>Docker是内核级别的虚拟化，可以在一个物理机上运行很多的容器实例！服务器的性能可以被压榨到极致。  </p><blockquote><p> 参考视频：b站<a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=3">狂神说java</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客测试</title>
      <link href="/posts/41570.html"/>
      <url>/posts/41570.html</url>
      
        <content type="html"><![CDATA[<p>Markdown练习。 </p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>有序列表  </p><ol><li>第一项<ol><li>里面第一项</li><li>里面第二项</li></ol></li><li>第二项  </li></ol><p>无序列表  </p><ul><li>第一项</li><li>第二项 </li></ul><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="https://gitee.com/qzwangustc/blogimage/raw/master/img/20200905105051.png" alt="图片1"> </p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>行间公式 $\lim_{x \to \infty}f(x)$  </p><p>$$<br>\lim_{x \to \infty}x^{\frac{1}{x}}=1<br>$$</p><p>$$<br>f(x)=\beta_1 x+\beta_2<br>\tag{1}<br>$$  </p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th>第一列</th><th align="center">第二列</th><th align="right">第三列</th></tr></thead><tbody><tr><td>1</td><td align="center">2</td><td align="right">3</td></tr><tr><td>2</td><td align="center">3</td><td align="right">4</td></tr></tbody></table><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://cn.bing.com/">必应</a>  </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> <span class="token function">cd</span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedir<span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>这是一个分割线  </p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>引用1<br>引用2<br>引用3    </p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
